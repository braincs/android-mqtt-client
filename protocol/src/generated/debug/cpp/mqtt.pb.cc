// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mqtt.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mqtt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Rect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rect_reflection_ = NULL;
const ::google::protobuf::Descriptor* RectF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RectF_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Start_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Start_Mode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Group_reflection_ = NULL;
const ::google::protobuf::Descriptor* Face_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Face_reflection_ = NULL;
const ::google::protobuf::Descriptor* Capture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Capture_reflection_ = NULL;
const ::google::protobuf::Descriptor* Recognize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Recognize_reflection_ = NULL;
const ::google::protobuf::Descriptor* Recognize_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Recognize_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapShot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapShot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Upgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Upgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeProgress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeProgress_reflection_ = NULL;
const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mqtt_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mqtt_2eproto() {
  protobuf_AddDesc_mqtt_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mqtt.proto");
  GOOGLE_CHECK(file != NULL);
  Rect_descriptor_ = file->message_type(0);
  static const int Rect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, height_),
  };
  Rect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Rect_descriptor_,
      Rect::internal_default_instance(),
      Rect_offsets_,
      -1,
      -1,
      -1,
      sizeof(Rect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _internal_metadata_));
  RectF_descriptor_ = file->message_type(1);
  static const int RectF_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectF, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectF, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectF, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectF, height_),
  };
  RectF_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RectF_descriptor_,
      RectF::internal_default_instance(),
      RectF_offsets_,
      -1,
      -1,
      -1,
      sizeof(RectF),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectF, _internal_metadata_));
  Response_descriptor_ = file->message_type(2);
  static const int Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, err_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::internal_default_instance(),
      Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_));
  Start_descriptor_ = file->message_type(3);
  static const int Start_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Start, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Start, is_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Start, health_check_interval_),
  };
  Start_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Start_descriptor_,
      Start::internal_default_instance(),
      Start_offsets_,
      -1,
      -1,
      -1,
      sizeof(Start),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Start, _internal_metadata_));
  Start_Mode_descriptor_ = Start_descriptor_->enum_type(0);
  Group_descriptor_ = file->message_type(4);
  static const int Group_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, threshold_),
  };
  Group_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Group_descriptor_,
      Group::internal_default_instance(),
      Group_offsets_,
      -1,
      -1,
      -1,
      sizeof(Group),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _internal_metadata_));
  Face_descriptor_ = file->message_type(5);
  static const int Face_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, image_),
  };
  Face_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Face_descriptor_,
      Face::internal_default_instance(),
      Face_offsets_,
      -1,
      -1,
      -1,
      sizeof(Face),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, _internal_metadata_));
  Capture_descriptor_ = file->message_type(6);
  static const int Capture_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capture, track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capture, seq_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capture, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capture, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capture, crop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capture, crop_rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capture, full_),
  };
  Capture_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Capture_descriptor_,
      Capture::internal_default_instance(),
      Capture_offsets_,
      -1,
      -1,
      -1,
      sizeof(Capture),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capture, _internal_metadata_));
  Recognize_descriptor_ = file->message_type(7);
  static const int Recognize_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recognize, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recognize, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recognize, crop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recognize, full_),
  };
  Recognize_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Recognize_descriptor_,
      Recognize::internal_default_instance(),
      Recognize_offsets_,
      -1,
      -1,
      -1,
      sizeof(Recognize),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recognize, _internal_metadata_));
  Recognize_Result_descriptor_ = Recognize_descriptor_->nested_type(0);
  static const int Recognize_Result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recognize_Result, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recognize_Result, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recognize_Result, score_),
  };
  Recognize_Result_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Recognize_Result_descriptor_,
      Recognize_Result::internal_default_instance(),
      Recognize_Result_offsets_,
      -1,
      -1,
      -1,
      sizeof(Recognize_Result),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recognize_Result, _internal_metadata_));
  SnapShot_descriptor_ = file->message_type(8);
  static const int SnapShot_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShot, image_),
  };
  SnapShot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SnapShot_descriptor_,
      SnapShot::internal_default_instance(),
      SnapShot_offsets_,
      -1,
      -1,
      -1,
      sizeof(SnapShot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShot, _internal_metadata_));
  Upgrade_descriptor_ = file->message_type(9);
  static const int Upgrade_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Upgrade, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Upgrade, url_),
  };
  Upgrade_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Upgrade_descriptor_,
      Upgrade::internal_default_instance(),
      Upgrade_offsets_,
      -1,
      -1,
      -1,
      sizeof(Upgrade),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Upgrade, _internal_metadata_));
  UpgradeProgress_descriptor_ = file->message_type(10);
  static const int UpgradeProgress_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeProgress, progress_),
  };
  UpgradeProgress_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpgradeProgress_descriptor_,
      UpgradeProgress::internal_default_instance(),
      UpgradeProgress_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpgradeProgress),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeProgress, _internal_metadata_));
  Status_descriptor_ = file->message_type(11);
  static const int Status_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, algorithm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, local_ip_),
  };
  Status_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Status_descriptor_,
      Status::internal_default_instance(),
      Status_offsets_,
      -1,
      -1,
      -1,
      sizeof(Status),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mqtt_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rect_descriptor_, Rect::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RectF_descriptor_, RectF::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, Response::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Start_descriptor_, Start::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Group_descriptor_, Group::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Face_descriptor_, Face::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Capture_descriptor_, Capture::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Recognize_descriptor_, Recognize::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Recognize_Result_descriptor_, Recognize_Result::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SnapShot_descriptor_, SnapShot::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Upgrade_descriptor_, Upgrade::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpgradeProgress_descriptor_, UpgradeProgress::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Status_descriptor_, Status::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mqtt_2eproto() {
  Rect_default_instance_.Shutdown();
  delete Rect_reflection_;
  RectF_default_instance_.Shutdown();
  delete RectF_reflection_;
  Response_default_instance_.Shutdown();
  delete Response_reflection_;
  Start_default_instance_.Shutdown();
  delete Start_reflection_;
  Group_default_instance_.Shutdown();
  delete Group_reflection_;
  Face_default_instance_.Shutdown();
  delete Face_reflection_;
  Capture_default_instance_.Shutdown();
  delete Capture_reflection_;
  Recognize_default_instance_.Shutdown();
  delete Recognize_reflection_;
  Recognize_Result_default_instance_.Shutdown();
  delete Recognize_Result_reflection_;
  SnapShot_default_instance_.Shutdown();
  delete SnapShot_reflection_;
  Upgrade_default_instance_.Shutdown();
  delete Upgrade_reflection_;
  UpgradeProgress_default_instance_.Shutdown();
  delete UpgradeProgress_reflection_;
  Status_default_instance_.Shutdown();
  delete Status_reflection_;
}

void protobuf_InitDefaults_mqtt_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Rect_default_instance_.DefaultConstruct();
  RectF_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Response_default_instance_.DefaultConstruct();
  Start_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Group_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Face_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Capture_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Recognize_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Recognize_Result_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SnapShot_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Upgrade_default_instance_.DefaultConstruct();
  UpgradeProgress_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Status_default_instance_.DefaultConstruct();
  Rect_default_instance_.get_mutable()->InitAsDefaultInstance();
  RectF_default_instance_.get_mutable()->InitAsDefaultInstance();
  Response_default_instance_.get_mutable()->InitAsDefaultInstance();
  Start_default_instance_.get_mutable()->InitAsDefaultInstance();
  Group_default_instance_.get_mutable()->InitAsDefaultInstance();
  Face_default_instance_.get_mutable()->InitAsDefaultInstance();
  Capture_default_instance_.get_mutable()->InitAsDefaultInstance();
  Recognize_default_instance_.get_mutable()->InitAsDefaultInstance();
  Recognize_Result_default_instance_.get_mutable()->InitAsDefaultInstance();
  SnapShot_default_instance_.get_mutable()->InitAsDefaultInstance();
  Upgrade_default_instance_.get_mutable()->InitAsDefaultInstance();
  UpgradeProgress_default_instance_.get_mutable()->InitAsDefaultInstance();
  Status_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_mqtt_2eproto_once_);
void protobuf_InitDefaults_mqtt_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_mqtt_2eproto_once_,
                 &protobuf_InitDefaults_mqtt_2eproto_impl);
}
void protobuf_AddDesc_mqtt_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_mqtt_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nmqtt.proto\022\002pb\"@\n\004Rect\022\014\n\004left\030\001 \001(\005\022\013"
    "\n\003top\030\002 \001(\005\022\r\n\005width\030\003 \001(\005\022\016\n\006height\030\004 \001"
    "(\005\"A\n\005RectF\022\014\n\004left\030\001 \001(\002\022\013\n\003top\030\002 \001(\002\022\r"
    "\n\005width\030\003 \001(\002\022\016\n\006height\030\004 \001(\002\"(\n\010Respons"
    "e\022\017\n\007success\030\001 \001(\005\022\013\n\003err\030\002 \001(\t\"y\n\005Start"
    "\022\034\n\004mode\030\001 \001(\0162\016.pb.Start.Mode\022\017\n\007is_ope"
    "n\030\002 \001(\010\022\035\n\025health_check_interval\030\003 \001(\005\"\""
    "\n\004Mode\022\013\n\007capture\020\000\022\r\n\trecognize\020\001\"6\n\005Gr"
    "oup\022\r\n\005group\030\001 \001(\t\022\013\n\003top\030\002 \001(\005\022\021\n\tthres"
    "hold\030\003 \001(\002\"M\n\004Face\022\r\n\005group\030\001 \001(\t\022\014\n\004fac"
    "e\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\013\n\003url\030\n \001(\t\022\r\n\005im"
    "age\030d \001(\014\"\210\001\n\007Capture\022\r\n\005track\030\001 \001(\005\022\017\n\007"
    "seq_num\030\002 \001(\005\022\021\n\ttimestamp\030\n \001(\003\022\017\n\007qual"
    "ity\030\013 \001(\002\022\014\n\004crop\030d \001(\014\022\034\n\tcrop_rect\030e \001"
    "(\0132\t.pb.RectF\022\r\n\004full\030\310\001 \001(\014\"\216\001\n\tRecogni"
    "ze\022!\n\003top\030\001 \003(\0132\024.pb.Recognize.Result\022\r\n"
    "\005group\030\002 \001(\t\022\014\n\004crop\030d \001(\014\022\014\n\004full\030e \001(\014"
    "\0323\n\006Result\022\014\n\004face\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\r"
    "\n\005score\030\013 \001(\002\"\031\n\010SnapShot\022\r\n\005image\030d \001(\014"
    "\"\'\n\007Upgrade\022\017\n\007timeout\030\001 \001(\005\022\013\n\003url\030\n \001("
    "\t\"#\n\017UpgradeProgress\022\020\n\010progress\030\001 \001(\005\">"
    "\n\006Status\022\017\n\007version\030\001 \001(\t\022\021\n\talgorithm\030\002"
    " \001(\t\022\020\n\010local_ip\030\n \001(\tB0\n$com.braincs.at"
    "trsc.protocol.protobufB\010Protocolb\006proto3", 960);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mqtt.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mqtt_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_mqtt_2eproto_once_);
void protobuf_AddDesc_mqtt_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_mqtt_2eproto_once_,
                 &protobuf_AddDesc_mqtt_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mqtt_2eproto {
  StaticDescriptorInitializer_mqtt_2eproto() {
    protobuf_AddDesc_mqtt_2eproto();
  }
} static_descriptor_initializer_mqtt_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rect::kLeftFieldNumber;
const int Rect::kTopFieldNumber;
const int Rect::kWidthFieldNumber;
const int Rect::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rect::Rect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mqtt_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Rect)
}

void Rect::InitAsDefaultInstance() {
}

Rect::Rect(const Rect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Rect)
}

void Rect::SharedCtor() {
  ::memset(&left_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&left_) + sizeof(height_));
  _cached_size_ = 0;
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:pb.Rect)
  SharedDtor();
}

void Rect::SharedDtor() {
}

void Rect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rect_descriptor_;
}

const Rect& Rect::default_instance() {
  protobuf_InitDefaults_mqtt_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Rect> Rect_default_instance_;

Rect* Rect::New(::google::protobuf::Arena* arena) const {
  Rect* n = new Rect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Rect)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Rect, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Rect*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(left_, height_);

#undef ZR_HELPER_
#undef ZR_

}

bool Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Rect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 left = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_top;
        break;
      }

      // optional int32 top = 2;
      case 2: {
        if (tag == 16) {
         parse_top:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional int32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Rect)
  return false;
#undef DO_
}

void Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Rect)
  // optional int32 left = 1;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->left(), output);
  }

  // optional int32 top = 2;
  if (this->top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->top(), output);
  }

  // optional int32 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.Rect)
}

::google::protobuf::uint8* Rect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Rect)
  // optional int32 left = 1;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->left(), target);
  }

  // optional int32 top = 2;
  if (this->top() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->top(), target);
  }

  // optional int32 width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int32 height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.Rect)
  return target;
}

size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Rect)
  size_t total_size = 0;

  // optional int32 left = 1;
  if (this->left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left());
  }

  // optional int32 top = 2;
  if (this->top() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->top());
  }

  // optional int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Rect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Rect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Rect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Rect)
    UnsafeMergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Rect)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Rect::UnsafeMergeFrom(const Rect& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.top() != 0) {
    set_top(from.top());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void Rect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Rect)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Rect::IsInitialized() const {

  return true;
}

void Rect::Swap(Rect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rect::InternalSwap(Rect* other) {
  std::swap(left_, other->left_);
  std::swap(top_, other->top_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rect_descriptor_;
  metadata.reflection = Rect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rect

// optional int32 left = 1;
void Rect::clear_left() {
  left_ = 0;
}
::google::protobuf::int32 Rect::left() const {
  // @@protoc_insertion_point(field_get:pb.Rect.left)
  return left_;
}
void Rect::set_left(::google::protobuf::int32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:pb.Rect.left)
}

// optional int32 top = 2;
void Rect::clear_top() {
  top_ = 0;
}
::google::protobuf::int32 Rect::top() const {
  // @@protoc_insertion_point(field_get:pb.Rect.top)
  return top_;
}
void Rect::set_top(::google::protobuf::int32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:pb.Rect.top)
}

// optional int32 width = 3;
void Rect::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 Rect::width() const {
  // @@protoc_insertion_point(field_get:pb.Rect.width)
  return width_;
}
void Rect::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:pb.Rect.width)
}

// optional int32 height = 4;
void Rect::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 Rect::height() const {
  // @@protoc_insertion_point(field_get:pb.Rect.height)
  return height_;
}
void Rect::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:pb.Rect.height)
}

inline const Rect* Rect::internal_default_instance() {
  return &Rect_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RectF::kLeftFieldNumber;
const int RectF::kTopFieldNumber;
const int RectF::kWidthFieldNumber;
const int RectF::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RectF::RectF()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mqtt_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RectF)
}

void RectF::InitAsDefaultInstance() {
}

RectF::RectF(const RectF& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.RectF)
}

void RectF::SharedCtor() {
  ::memset(&left_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&left_) + sizeof(height_));
  _cached_size_ = 0;
}

RectF::~RectF() {
  // @@protoc_insertion_point(destructor:pb.RectF)
  SharedDtor();
}

void RectF::SharedDtor() {
}

void RectF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RectF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RectF_descriptor_;
}

const RectF& RectF::default_instance() {
  protobuf_InitDefaults_mqtt_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RectF> RectF_default_instance_;

RectF* RectF::New(::google::protobuf::Arena* arena) const {
  RectF* n = new RectF;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RectF::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RectF)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RectF, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RectF*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(left_, height_);

#undef ZR_HELPER_
#undef ZR_

}

bool RectF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RectF)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float left = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_top;
        break;
      }

      // optional float top = 2;
      case 2: {
        if (tag == 21) {
         parse_top:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_width;
        break;
      }

      // optional float width = 3;
      case 3: {
        if (tag == 29) {
         parse_width:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_height;
        break;
      }

      // optional float height = 4;
      case 4: {
        if (tag == 37) {
         parse_height:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RectF)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RectF)
  return false;
#undef DO_
}

void RectF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RectF)
  // optional float left = 1;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left(), output);
  }

  // optional float top = 2;
  if (this->top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->top(), output);
  }

  // optional float width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->width(), output);
  }

  // optional float height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.RectF)
}

::google::protobuf::uint8* RectF::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RectF)
  // optional float left = 1;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left(), target);
  }

  // optional float top = 2;
  if (this->top() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->top(), target);
  }

  // optional float width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->width(), target);
  }

  // optional float height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.RectF)
  return target;
}

size_t RectF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RectF)
  size_t total_size = 0;

  // optional float left = 1;
  if (this->left() != 0) {
    total_size += 1 + 4;
  }

  // optional float top = 2;
  if (this->top() != 0) {
    total_size += 1 + 4;
  }

  // optional float width = 3;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // optional float height = 4;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RectF::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RectF)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RectF* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RectF>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RectF)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RectF)
    UnsafeMergeFrom(*source);
  }
}

void RectF::MergeFrom(const RectF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RectF)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RectF::UnsafeMergeFrom(const RectF& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.top() != 0) {
    set_top(from.top());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void RectF::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RectF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectF::CopyFrom(const RectF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RectF)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RectF::IsInitialized() const {

  return true;
}

void RectF::Swap(RectF* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RectF::InternalSwap(RectF* other) {
  std::swap(left_, other->left_);
  std::swap(top_, other->top_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RectF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RectF_descriptor_;
  metadata.reflection = RectF_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RectF

// optional float left = 1;
void RectF::clear_left() {
  left_ = 0;
}
float RectF::left() const {
  // @@protoc_insertion_point(field_get:pb.RectF.left)
  return left_;
}
void RectF::set_left(float value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:pb.RectF.left)
}

// optional float top = 2;
void RectF::clear_top() {
  top_ = 0;
}
float RectF::top() const {
  // @@protoc_insertion_point(field_get:pb.RectF.top)
  return top_;
}
void RectF::set_top(float value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:pb.RectF.top)
}

// optional float width = 3;
void RectF::clear_width() {
  width_ = 0;
}
float RectF::width() const {
  // @@protoc_insertion_point(field_get:pb.RectF.width)
  return width_;
}
void RectF::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:pb.RectF.width)
}

// optional float height = 4;
void RectF::clear_height() {
  height_ = 0;
}
float RectF::height() const {
  // @@protoc_insertion_point(field_get:pb.RectF.height)
  return height_;
}
void RectF::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:pb.RectF.height)
}

inline const RectF* RectF::internal_default_instance() {
  return &RectF_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kSuccessFieldNumber;
const int Response::kErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mqtt_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Response)
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Response)
}

void Response::SharedCtor() {
  err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = 0;
  _cached_size_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:pb.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  err_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  protobuf_InitDefaults_mqtt_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Response> Response_default_instance_;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Response)
  success_ = 0;
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 success = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_err;
        break;
      }

      // optional string err = 2;
      case 2: {
        if (tag == 18) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Response.err"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Response)
  // optional int32 success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->success(), output);
  }

  // optional string err = 2;
  if (this->err().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Response.err");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->err(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Response)
  // optional int32 success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->success(), target);
  }

  // optional string err = 2;
  if (this->err().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Response.err");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->err(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Response)
  size_t total_size = 0;

  // optional int32 success = 1;
  if (this->success() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->success());
  }

  // optional string err = 2;
  if (this->err().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->err());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Response)
    UnsafeMergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Response)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Response::UnsafeMergeFrom(const Response& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.err().size() > 0) {

    err_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_);
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Response)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(success_, other->success_);
  err_.Swap(&other->err_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional int32 success = 1;
void Response::clear_success() {
  success_ = 0;
}
::google::protobuf::int32 Response::success() const {
  // @@protoc_insertion_point(field_get:pb.Response.success)
  return success_;
}
void Response::set_success(::google::protobuf::int32 value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:pb.Response.success)
}

// optional string err = 2;
void Response::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Response::err() const {
  // @@protoc_insertion_point(field_get:pb.Response.err)
  return err_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Response::set_err(const ::std::string& value) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Response.err)
}
void Response::set_err(const char* value) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Response.err)
}
void Response::set_err(const char* value, size_t size) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Response.err)
}
::std::string* Response::mutable_err() {
  
  // @@protoc_insertion_point(field_mutable:pb.Response.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Response::release_err() {
  // @@protoc_insertion_point(field_release:pb.Response.err)
  
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Response::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    
  } else {
    
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:pb.Response.err)
}

inline const Response* Response::internal_default_instance() {
  return &Response_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Start_Mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Start_Mode_descriptor_;
}
bool Start_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Start_Mode Start::capture;
const Start_Mode Start::recognize;
const Start_Mode Start::Mode_MIN;
const Start_Mode Start::Mode_MAX;
const int Start::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Start::kModeFieldNumber;
const int Start::kIsOpenFieldNumber;
const int Start::kHealthCheckIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Start::Start()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mqtt_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Start)
}

void Start::InitAsDefaultInstance() {
}

Start::Start(const Start& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Start)
}

void Start::SharedCtor() {
  ::memset(&mode_, 0, reinterpret_cast<char*>(&health_check_interval_) -
    reinterpret_cast<char*>(&mode_) + sizeof(health_check_interval_));
  _cached_size_ = 0;
}

Start::~Start() {
  // @@protoc_insertion_point(destructor:pb.Start)
  SharedDtor();
}

void Start::SharedDtor() {
}

void Start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Start_descriptor_;
}

const Start& Start::default_instance() {
  protobuf_InitDefaults_mqtt_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Start> Start_default_instance_;

Start* Start::New(::google::protobuf::Arena* arena) const {
  Start* n = new Start;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Start::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Start)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Start, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Start*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mode_, health_check_interval_);

#undef ZR_HELPER_
#undef ZR_

}

bool Start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Start)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Start.Mode mode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::pb::Start_Mode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_open;
        break;
      }

      // optional bool is_open = 2;
      case 2: {
        if (tag == 16) {
         parse_is_open:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_open_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_health_check_interval;
        break;
      }

      // optional int32 health_check_interval = 3;
      case 3: {
        if (tag == 24) {
         parse_health_check_interval:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_check_interval_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Start)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Start)
  return false;
#undef DO_
}

void Start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Start)
  // optional .pb.Start.Mode mode = 1;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // optional bool is_open = 2;
  if (this->is_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_open(), output);
  }

  // optional int32 health_check_interval = 3;
  if (this->health_check_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->health_check_interval(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.Start)
}

::google::protobuf::uint8* Start::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Start)
  // optional .pb.Start.Mode mode = 1;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // optional bool is_open = 2;
  if (this->is_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_open(), target);
  }

  // optional int32 health_check_interval = 3;
  if (this->health_check_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->health_check_interval(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.Start)
  return target;
}

size_t Start::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Start)
  size_t total_size = 0;

  // optional .pb.Start.Mode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // optional bool is_open = 2;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 health_check_interval = 3;
  if (this->health_check_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->health_check_interval());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Start::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Start)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Start* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Start>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Start)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Start)
    UnsafeMergeFrom(*source);
  }
}

void Start::MergeFrom(const Start& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Start)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Start::UnsafeMergeFrom(const Start& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.is_open() != 0) {
    set_is_open(from.is_open());
  }
  if (from.health_check_interval() != 0) {
    set_health_check_interval(from.health_check_interval());
  }
}

void Start::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Start::CopyFrom(const Start& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Start)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Start::IsInitialized() const {

  return true;
}

void Start::Swap(Start* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Start::InternalSwap(Start* other) {
  std::swap(mode_, other->mode_);
  std::swap(is_open_, other->is_open_);
  std::swap(health_check_interval_, other->health_check_interval_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Start_descriptor_;
  metadata.reflection = Start_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Start

// optional .pb.Start.Mode mode = 1;
void Start::clear_mode() {
  mode_ = 0;
}
::pb::Start_Mode Start::mode() const {
  // @@protoc_insertion_point(field_get:pb.Start.mode)
  return static_cast< ::pb::Start_Mode >(mode_);
}
void Start::set_mode(::pb::Start_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:pb.Start.mode)
}

// optional bool is_open = 2;
void Start::clear_is_open() {
  is_open_ = false;
}
bool Start::is_open() const {
  // @@protoc_insertion_point(field_get:pb.Start.is_open)
  return is_open_;
}
void Start::set_is_open(bool value) {
  
  is_open_ = value;
  // @@protoc_insertion_point(field_set:pb.Start.is_open)
}

// optional int32 health_check_interval = 3;
void Start::clear_health_check_interval() {
  health_check_interval_ = 0;
}
::google::protobuf::int32 Start::health_check_interval() const {
  // @@protoc_insertion_point(field_get:pb.Start.health_check_interval)
  return health_check_interval_;
}
void Start::set_health_check_interval(::google::protobuf::int32 value) {
  
  health_check_interval_ = value;
  // @@protoc_insertion_point(field_set:pb.Start.health_check_interval)
}

inline const Start* Start::internal_default_instance() {
  return &Start_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Group::kGroupFieldNumber;
const int Group::kTopFieldNumber;
const int Group::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Group::Group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mqtt_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Group)
}

void Group::InitAsDefaultInstance() {
}

Group::Group(const Group& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Group)
}

void Group::SharedCtor() {
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&top_, 0, reinterpret_cast<char*>(&threshold_) -
    reinterpret_cast<char*>(&top_) + sizeof(threshold_));
  _cached_size_ = 0;
}

Group::~Group() {
  // @@protoc_insertion_point(destructor:pb.Group)
  SharedDtor();
}

void Group::SharedDtor() {
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Group_descriptor_;
}

const Group& Group::default_instance() {
  protobuf_InitDefaults_mqtt_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Group> Group_default_instance_;

Group* Group::New(::google::protobuf::Arena* arena) const {
  Group* n = new Group;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Group::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Group)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Group, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Group*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(top_, threshold_);
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string group = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group().data(), this->group().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Group.group"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_top;
        break;
      }

      // optional int32 top = 2;
      case 2: {
        if (tag == 16) {
         parse_top:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_threshold;
        break;
      }

      // optional float threshold = 3;
      case 3: {
        if (tag == 29) {
         parse_threshold:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Group)
  return false;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Group)
  // optional string group = 1;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Group.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group(), output);
  }

  // optional int32 top = 2;
  if (this->top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->top(), output);
  }

  // optional float threshold = 3;
  if (this->threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->threshold(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.Group)
}

::google::protobuf::uint8* Group::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Group)
  // optional string group = 1;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Group.group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group(), target);
  }

  // optional int32 top = 2;
  if (this->top() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->top(), target);
  }

  // optional float threshold = 3;
  if (this->threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->threshold(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.Group)
  return target;
}

size_t Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Group)
  size_t total_size = 0;

  // optional string group = 1;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group());
  }

  // optional int32 top = 2;
  if (this->top() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->top());
  }

  // optional float threshold = 3;
  if (this->threshold() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Group::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Group)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Group* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Group>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Group)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Group)
    UnsafeMergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Group)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Group::UnsafeMergeFrom(const Group& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.group().size() > 0) {

    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  if (from.top() != 0) {
    set_top(from.top());
  }
  if (from.threshold() != 0) {
    set_threshold(from.threshold());
  }
}

void Group::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Group)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Group::IsInitialized() const {

  return true;
}

void Group::Swap(Group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Group::InternalSwap(Group* other) {
  group_.Swap(&other->group_);
  std::swap(top_, other->top_);
  std::swap(threshold_, other->threshold_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Group_descriptor_;
  metadata.reflection = Group_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Group

// optional string group = 1;
void Group::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Group::group() const {
  // @@protoc_insertion_point(field_get:pb.Group.group)
  return group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Group.group)
}
void Group::set_group(const char* value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Group.group)
}
void Group::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Group.group)
}
::std::string* Group::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:pb.Group.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Group::release_group() {
  // @@protoc_insertion_point(field_release:pb.Group.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:pb.Group.group)
}

// optional int32 top = 2;
void Group::clear_top() {
  top_ = 0;
}
::google::protobuf::int32 Group::top() const {
  // @@protoc_insertion_point(field_get:pb.Group.top)
  return top_;
}
void Group::set_top(::google::protobuf::int32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:pb.Group.top)
}

// optional float threshold = 3;
void Group::clear_threshold() {
  threshold_ = 0;
}
float Group::threshold() const {
  // @@protoc_insertion_point(field_get:pb.Group.threshold)
  return threshold_;
}
void Group::set_threshold(float value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:pb.Group.threshold)
}

inline const Group* Group::internal_default_instance() {
  return &Group_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Face::kGroupFieldNumber;
const int Face::kFaceFieldNumber;
const int Face::kNameFieldNumber;
const int Face::kUrlFieldNumber;
const int Face::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Face::Face()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mqtt_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Face)
}

void Face::InitAsDefaultInstance() {
}

Face::Face(const Face& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Face)
}

void Face::SharedCtor() {
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  face_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Face::~Face() {
  // @@protoc_insertion_point(destructor:pb.Face)
  SharedDtor();
}

void Face::SharedDtor() {
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  face_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Face::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Face::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Face_descriptor_;
}

const Face& Face::default_instance() {
  protobuf_InitDefaults_mqtt_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Face> Face_default_instance_;

Face* Face::New(::google::protobuf::Arena* arena) const {
  Face* n = new Face;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Face::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Face)
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  face_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Face::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Face)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string group = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group().data(), this->group().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Face.group"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_face;
        break;
      }

      // optional string face = 2;
      case 2: {
        if (tag == 18) {
         parse_face:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_face()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->face().data(), this->face().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Face.face"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Face.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_url;
        break;
      }

      // optional string url = 10;
      case 10: {
        if (tag == 82) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Face.url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_image;
        break;
      }

      // optional bytes image = 100;
      case 100: {
        if (tag == 802) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Face)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Face)
  return false;
#undef DO_
}

void Face::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Face)
  // optional string group = 1;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Face.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group(), output);
  }

  // optional string face = 2;
  if (this->face().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->face().data(), this->face().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Face.face");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->face(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Face.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string url = 10;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Face.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->url(), output);
  }

  // optional bytes image = 100;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      100, this->image(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.Face)
}

::google::protobuf::uint8* Face::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Face)
  // optional string group = 1;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Face.group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group(), target);
  }

  // optional string face = 2;
  if (this->face().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->face().data(), this->face().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Face.face");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->face(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Face.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string url = 10;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Face.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->url(), target);
  }

  // optional bytes image = 100;
  if (this->image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        100, this->image(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.Face)
  return target;
}

size_t Face::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Face)
  size_t total_size = 0;

  // optional string group = 1;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group());
  }

  // optional string face = 2;
  if (this->face().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->face());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string url = 10;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // optional bytes image = 100;
  if (this->image().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Face::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Face)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Face* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Face>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Face)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Face)
    UnsafeMergeFrom(*source);
  }
}

void Face::MergeFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Face)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Face::UnsafeMergeFrom(const Face& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.group().size() > 0) {

    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  if (from.face().size() > 0) {

    face_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.face_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
}

void Face::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Face::CopyFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Face)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Face::IsInitialized() const {

  return true;
}

void Face::Swap(Face* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Face::InternalSwap(Face* other) {
  group_.Swap(&other->group_);
  face_.Swap(&other->face_);
  name_.Swap(&other->name_);
  url_.Swap(&other->url_);
  image_.Swap(&other->image_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Face::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Face_descriptor_;
  metadata.reflection = Face_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Face

// optional string group = 1;
void Face::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Face::group() const {
  // @@protoc_insertion_point(field_get:pb.Face.group)
  return group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Face::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Face.group)
}
void Face::set_group(const char* value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Face.group)
}
void Face::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Face.group)
}
::std::string* Face::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:pb.Face.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Face::release_group() {
  // @@protoc_insertion_point(field_release:pb.Face.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Face::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:pb.Face.group)
}

// optional string face = 2;
void Face::clear_face() {
  face_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Face::face() const {
  // @@protoc_insertion_point(field_get:pb.Face.face)
  return face_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Face::set_face(const ::std::string& value) {
  
  face_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Face.face)
}
void Face::set_face(const char* value) {
  
  face_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Face.face)
}
void Face::set_face(const char* value, size_t size) {
  
  face_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Face.face)
}
::std::string* Face::mutable_face() {
  
  // @@protoc_insertion_point(field_mutable:pb.Face.face)
  return face_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Face::release_face() {
  // @@protoc_insertion_point(field_release:pb.Face.face)
  
  return face_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Face::set_allocated_face(::std::string* face) {
  if (face != NULL) {
    
  } else {
    
  }
  face_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face);
  // @@protoc_insertion_point(field_set_allocated:pb.Face.face)
}

// optional string name = 3;
void Face::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Face::name() const {
  // @@protoc_insertion_point(field_get:pb.Face.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Face::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Face.name)
}
void Face::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Face.name)
}
void Face::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Face.name)
}
::std::string* Face::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.Face.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Face::release_name() {
  // @@protoc_insertion_point(field_release:pb.Face.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Face::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.Face.name)
}

// optional string url = 10;
void Face::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Face::url() const {
  // @@protoc_insertion_point(field_get:pb.Face.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Face::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Face.url)
}
void Face::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Face.url)
}
void Face::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Face.url)
}
::std::string* Face::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:pb.Face.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Face::release_url() {
  // @@protoc_insertion_point(field_release:pb.Face.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Face::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:pb.Face.url)
}

// optional bytes image = 100;
void Face::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Face::image() const {
  // @@protoc_insertion_point(field_get:pb.Face.image)
  return image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Face::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Face.image)
}
void Face::set_image(const char* value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Face.image)
}
void Face::set_image(const void* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Face.image)
}
::std::string* Face::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:pb.Face.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Face::release_image() {
  // @@protoc_insertion_point(field_release:pb.Face.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Face::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:pb.Face.image)
}

inline const Face* Face::internal_default_instance() {
  return &Face_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Capture::kTrackFieldNumber;
const int Capture::kSeqNumFieldNumber;
const int Capture::kTimestampFieldNumber;
const int Capture::kQualityFieldNumber;
const int Capture::kCropFieldNumber;
const int Capture::kCropRectFieldNumber;
const int Capture::kFullFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Capture::Capture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mqtt_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Capture)
}

void Capture::InitAsDefaultInstance() {
  crop_rect_ = const_cast< ::pb::RectF*>(
      ::pb::RectF::internal_default_instance());
}

Capture::Capture(const Capture& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Capture)
}

void Capture::SharedCtor() {
  crop_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crop_rect_ = NULL;
  ::memset(&track_, 0, reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&track_) + sizeof(quality_));
  _cached_size_ = 0;
}

Capture::~Capture() {
  // @@protoc_insertion_point(destructor:pb.Capture)
  SharedDtor();
}

void Capture::SharedDtor() {
  crop_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Capture_default_instance_.get()) {
    delete crop_rect_;
  }
}

void Capture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Capture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Capture_descriptor_;
}

const Capture& Capture::default_instance() {
  protobuf_InitDefaults_mqtt_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Capture> Capture_default_instance_;

Capture* Capture::New(::google::protobuf::Arena* arena) const {
  Capture* n = new Capture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Capture::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Capture)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Capture, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Capture*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(track_, quality_);
  crop_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && crop_rect_ != NULL) delete crop_rect_;
  crop_rect_ = NULL;
  full_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Capture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Capture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 track = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seq_num;
        break;
      }

      // optional int32 seq_num = 2;
      case 2: {
        if (tag == 16) {
         parse_seq_num:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 10;
      case 10: {
        if (tag == 80) {
         parse_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_quality;
        break;
      }

      // optional float quality = 11;
      case 11: {
        if (tag == 93) {
         parse_quality:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_crop;
        break;
      }

      // optional bytes crop = 100;
      case 100: {
        if (tag == 802) {
         parse_crop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_crop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_crop_rect;
        break;
      }

      // optional .pb.RectF crop_rect = 101;
      case 101: {
        if (tag == 810) {
         parse_crop_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crop_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1602)) goto parse_full;
        break;
      }

      // optional bytes full = 200;
      case 200: {
        if (tag == 1602) {
         parse_full:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_full()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Capture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Capture)
  return false;
#undef DO_
}

void Capture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Capture)
  // optional int32 track = 1;
  if (this->track() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->track(), output);
  }

  // optional int32 seq_num = 2;
  if (this->seq_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seq_num(), output);
  }

  // optional int64 timestamp = 10;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->timestamp(), output);
  }

  // optional float quality = 11;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->quality(), output);
  }

  // optional bytes crop = 100;
  if (this->crop().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      100, this->crop(), output);
  }

  // optional .pb.RectF crop_rect = 101;
  if (this->has_crop_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->crop_rect_, output);
  }

  // optional bytes full = 200;
  if (this->full().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      200, this->full(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.Capture)
}

::google::protobuf::uint8* Capture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Capture)
  // optional int32 track = 1;
  if (this->track() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->track(), target);
  }

  // optional int32 seq_num = 2;
  if (this->seq_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seq_num(), target);
  }

  // optional int64 timestamp = 10;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->timestamp(), target);
  }

  // optional float quality = 11;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->quality(), target);
  }

  // optional bytes crop = 100;
  if (this->crop().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        100, this->crop(), target);
  }

  // optional .pb.RectF crop_rect = 101;
  if (this->has_crop_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, *this->crop_rect_, false, target);
  }

  // optional bytes full = 200;
  if (this->full().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        200, this->full(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.Capture)
  return target;
}

size_t Capture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Capture)
  size_t total_size = 0;

  // optional int32 track = 1;
  if (this->track() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->track());
  }

  // optional int32 seq_num = 2;
  if (this->seq_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seq_num());
  }

  // optional int64 timestamp = 10;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional float quality = 11;
  if (this->quality() != 0) {
    total_size += 1 + 4;
  }

  // optional bytes crop = 100;
  if (this->crop().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->crop());
  }

  // optional .pb.RectF crop_rect = 101;
  if (this->has_crop_rect()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->crop_rect_);
  }

  // optional bytes full = 200;
  if (this->full().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->full());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Capture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Capture)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Capture* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Capture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Capture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Capture)
    UnsafeMergeFrom(*source);
  }
}

void Capture::MergeFrom(const Capture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Capture)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Capture::UnsafeMergeFrom(const Capture& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.track() != 0) {
    set_track(from.track());
  }
  if (from.seq_num() != 0) {
    set_seq_num(from.seq_num());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
  if (from.crop().size() > 0) {

    crop_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crop_);
  }
  if (from.has_crop_rect()) {
    mutable_crop_rect()->::pb::RectF::MergeFrom(from.crop_rect());
  }
  if (from.full().size() > 0) {

    full_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_);
  }
}

void Capture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Capture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Capture::CopyFrom(const Capture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Capture)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Capture::IsInitialized() const {

  return true;
}

void Capture::Swap(Capture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Capture::InternalSwap(Capture* other) {
  std::swap(track_, other->track_);
  std::swap(seq_num_, other->seq_num_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(quality_, other->quality_);
  crop_.Swap(&other->crop_);
  std::swap(crop_rect_, other->crop_rect_);
  full_.Swap(&other->full_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Capture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Capture_descriptor_;
  metadata.reflection = Capture_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Capture

// optional int32 track = 1;
void Capture::clear_track() {
  track_ = 0;
}
::google::protobuf::int32 Capture::track() const {
  // @@protoc_insertion_point(field_get:pb.Capture.track)
  return track_;
}
void Capture::set_track(::google::protobuf::int32 value) {
  
  track_ = value;
  // @@protoc_insertion_point(field_set:pb.Capture.track)
}

// optional int32 seq_num = 2;
void Capture::clear_seq_num() {
  seq_num_ = 0;
}
::google::protobuf::int32 Capture::seq_num() const {
  // @@protoc_insertion_point(field_get:pb.Capture.seq_num)
  return seq_num_;
}
void Capture::set_seq_num(::google::protobuf::int32 value) {
  
  seq_num_ = value;
  // @@protoc_insertion_point(field_set:pb.Capture.seq_num)
}

// optional int64 timestamp = 10;
void Capture::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Capture::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.Capture.timestamp)
  return timestamp_;
}
void Capture::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:pb.Capture.timestamp)
}

// optional float quality = 11;
void Capture::clear_quality() {
  quality_ = 0;
}
float Capture::quality() const {
  // @@protoc_insertion_point(field_get:pb.Capture.quality)
  return quality_;
}
void Capture::set_quality(float value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:pb.Capture.quality)
}

// optional bytes crop = 100;
void Capture::clear_crop() {
  crop_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Capture::crop() const {
  // @@protoc_insertion_point(field_get:pb.Capture.crop)
  return crop_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Capture::set_crop(const ::std::string& value) {
  
  crop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Capture.crop)
}
void Capture::set_crop(const char* value) {
  
  crop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Capture.crop)
}
void Capture::set_crop(const void* value, size_t size) {
  
  crop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Capture.crop)
}
::std::string* Capture::mutable_crop() {
  
  // @@protoc_insertion_point(field_mutable:pb.Capture.crop)
  return crop_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Capture::release_crop() {
  // @@protoc_insertion_point(field_release:pb.Capture.crop)
  
  return crop_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Capture::set_allocated_crop(::std::string* crop) {
  if (crop != NULL) {
    
  } else {
    
  }
  crop_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crop);
  // @@protoc_insertion_point(field_set_allocated:pb.Capture.crop)
}

// optional .pb.RectF crop_rect = 101;
bool Capture::has_crop_rect() const {
  return this != internal_default_instance() && crop_rect_ != NULL;
}
void Capture::clear_crop_rect() {
  if (GetArenaNoVirtual() == NULL && crop_rect_ != NULL) delete crop_rect_;
  crop_rect_ = NULL;
}
const ::pb::RectF& Capture::crop_rect() const {
  // @@protoc_insertion_point(field_get:pb.Capture.crop_rect)
  return crop_rect_ != NULL ? *crop_rect_
                         : *::pb::RectF::internal_default_instance();
}
::pb::RectF* Capture::mutable_crop_rect() {
  
  if (crop_rect_ == NULL) {
    crop_rect_ = new ::pb::RectF;
  }
  // @@protoc_insertion_point(field_mutable:pb.Capture.crop_rect)
  return crop_rect_;
}
::pb::RectF* Capture::release_crop_rect() {
  // @@protoc_insertion_point(field_release:pb.Capture.crop_rect)
  
  ::pb::RectF* temp = crop_rect_;
  crop_rect_ = NULL;
  return temp;
}
void Capture::set_allocated_crop_rect(::pb::RectF* crop_rect) {
  delete crop_rect_;
  crop_rect_ = crop_rect;
  if (crop_rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Capture.crop_rect)
}

// optional bytes full = 200;
void Capture::clear_full() {
  full_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Capture::full() const {
  // @@protoc_insertion_point(field_get:pb.Capture.full)
  return full_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Capture::set_full(const ::std::string& value) {
  
  full_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Capture.full)
}
void Capture::set_full(const char* value) {
  
  full_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Capture.full)
}
void Capture::set_full(const void* value, size_t size) {
  
  full_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Capture.full)
}
::std::string* Capture::mutable_full() {
  
  // @@protoc_insertion_point(field_mutable:pb.Capture.full)
  return full_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Capture::release_full() {
  // @@protoc_insertion_point(field_release:pb.Capture.full)
  
  return full_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Capture::set_allocated_full(::std::string* full) {
  if (full != NULL) {
    
  } else {
    
  }
  full_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full);
  // @@protoc_insertion_point(field_set_allocated:pb.Capture.full)
}

inline const Capture* Capture::internal_default_instance() {
  return &Capture_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Recognize_Result::kFaceFieldNumber;
const int Recognize_Result::kNameFieldNumber;
const int Recognize_Result::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Recognize_Result::Recognize_Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mqtt_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Recognize.Result)
}

void Recognize_Result::InitAsDefaultInstance() {
}

Recognize_Result::Recognize_Result(const Recognize_Result& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Recognize.Result)
}

void Recognize_Result::SharedCtor() {
  face_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
  _cached_size_ = 0;
}

Recognize_Result::~Recognize_Result() {
  // @@protoc_insertion_point(destructor:pb.Recognize.Result)
  SharedDtor();
}

void Recognize_Result::SharedDtor() {
  face_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Recognize_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Recognize_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Recognize_Result_descriptor_;
}

const Recognize_Result& Recognize_Result::default_instance() {
  protobuf_InitDefaults_mqtt_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Recognize_Result> Recognize_Result_default_instance_;

Recognize_Result* Recognize_Result::New(::google::protobuf::Arena* arena) const {
  Recognize_Result* n = new Recognize_Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Recognize_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Recognize.Result)
  face_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
}

bool Recognize_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Recognize.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string face = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_face()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->face().data(), this->face().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Recognize.Result.face"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Recognize.Result.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_score;
        break;
      }

      // optional float score = 11;
      case 11: {
        if (tag == 93) {
         parse_score:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Recognize.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Recognize.Result)
  return false;
#undef DO_
}

void Recognize_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Recognize.Result)
  // optional string face = 1;
  if (this->face().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->face().data(), this->face().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Recognize.Result.face");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->face(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Recognize.Result.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional float score = 11;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->score(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.Recognize.Result)
}

::google::protobuf::uint8* Recognize_Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Recognize.Result)
  // optional string face = 1;
  if (this->face().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->face().data(), this->face().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Recognize.Result.face");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->face(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Recognize.Result.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional float score = 11;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->score(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.Recognize.Result)
  return target;
}

size_t Recognize_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Recognize.Result)
  size_t total_size = 0;

  // optional string face = 1;
  if (this->face().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->face());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional float score = 11;
  if (this->score() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Recognize_Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Recognize.Result)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Recognize_Result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Recognize_Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Recognize.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Recognize.Result)
    UnsafeMergeFrom(*source);
  }
}

void Recognize_Result::MergeFrom(const Recognize_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Recognize.Result)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Recognize_Result::UnsafeMergeFrom(const Recognize_Result& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.face().size() > 0) {

    face_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.face_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void Recognize_Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Recognize.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Recognize_Result::CopyFrom(const Recognize_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Recognize.Result)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Recognize_Result::IsInitialized() const {

  return true;
}

void Recognize_Result::Swap(Recognize_Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Recognize_Result::InternalSwap(Recognize_Result* other) {
  face_.Swap(&other->face_);
  name_.Swap(&other->name_);
  std::swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Recognize_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Recognize_Result_descriptor_;
  metadata.reflection = Recognize_Result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Recognize::kTopFieldNumber;
const int Recognize::kGroupFieldNumber;
const int Recognize::kCropFieldNumber;
const int Recognize::kFullFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Recognize::Recognize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mqtt_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Recognize)
}

void Recognize::InitAsDefaultInstance() {
}

Recognize::Recognize(const Recognize& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Recognize)
}

void Recognize::SharedCtor() {
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crop_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Recognize::~Recognize() {
  // @@protoc_insertion_point(destructor:pb.Recognize)
  SharedDtor();
}

void Recognize::SharedDtor() {
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crop_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Recognize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Recognize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Recognize_descriptor_;
}

const Recognize& Recognize::default_instance() {
  protobuf_InitDefaults_mqtt_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Recognize> Recognize_default_instance_;

Recognize* Recognize::New(::google::protobuf::Arena* arena) const {
  Recognize* n = new Recognize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Recognize::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Recognize)
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crop_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  top_.Clear();
}

bool Recognize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Recognize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Recognize.Result top = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_top:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_top()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_top;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_group;
        break;
      }

      // optional string group = 2;
      case 2: {
        if (tag == 18) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group().data(), this->group().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Recognize.group"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_crop;
        break;
      }

      // optional bytes crop = 100;
      case 100: {
        if (tag == 802) {
         parse_crop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_crop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_full;
        break;
      }

      // optional bytes full = 101;
      case 101: {
        if (tag == 810) {
         parse_full:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_full()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Recognize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Recognize)
  return false;
#undef DO_
}

void Recognize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Recognize)
  // repeated .pb.Recognize.Result top = 1;
  for (unsigned int i = 0, n = this->top_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->top(i), output);
  }

  // optional string group = 2;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Recognize.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group(), output);
  }

  // optional bytes crop = 100;
  if (this->crop().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      100, this->crop(), output);
  }

  // optional bytes full = 101;
  if (this->full().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->full(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.Recognize)
}

::google::protobuf::uint8* Recognize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Recognize)
  // repeated .pb.Recognize.Result top = 1;
  for (unsigned int i = 0, n = this->top_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->top(i), false, target);
  }

  // optional string group = 2;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Recognize.group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group(), target);
  }

  // optional bytes crop = 100;
  if (this->crop().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        100, this->crop(), target);
  }

  // optional bytes full = 101;
  if (this->full().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        101, this->full(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.Recognize)
  return target;
}

size_t Recognize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Recognize)
  size_t total_size = 0;

  // optional string group = 2;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group());
  }

  // optional bytes crop = 100;
  if (this->crop().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->crop());
  }

  // optional bytes full = 101;
  if (this->full().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->full());
  }

  // repeated .pb.Recognize.Result top = 1;
  {
    unsigned int count = this->top_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Recognize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Recognize)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Recognize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Recognize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Recognize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Recognize)
    UnsafeMergeFrom(*source);
  }
}

void Recognize::MergeFrom(const Recognize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Recognize)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Recognize::UnsafeMergeFrom(const Recognize& from) {
  GOOGLE_DCHECK(&from != this);
  top_.MergeFrom(from.top_);
  if (from.group().size() > 0) {

    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  if (from.crop().size() > 0) {

    crop_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crop_);
  }
  if (from.full().size() > 0) {

    full_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_);
  }
}

void Recognize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Recognize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Recognize::CopyFrom(const Recognize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Recognize)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Recognize::IsInitialized() const {

  return true;
}

void Recognize::Swap(Recognize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Recognize::InternalSwap(Recognize* other) {
  top_.UnsafeArenaSwap(&other->top_);
  group_.Swap(&other->group_);
  crop_.Swap(&other->crop_);
  full_.Swap(&other->full_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Recognize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Recognize_descriptor_;
  metadata.reflection = Recognize_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Recognize_Result

// optional string face = 1;
void Recognize_Result::clear_face() {
  face_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Recognize_Result::face() const {
  // @@protoc_insertion_point(field_get:pb.Recognize.Result.face)
  return face_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Recognize_Result::set_face(const ::std::string& value) {
  
  face_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Recognize.Result.face)
}
void Recognize_Result::set_face(const char* value) {
  
  face_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Recognize.Result.face)
}
void Recognize_Result::set_face(const char* value, size_t size) {
  
  face_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Recognize.Result.face)
}
::std::string* Recognize_Result::mutable_face() {
  
  // @@protoc_insertion_point(field_mutable:pb.Recognize.Result.face)
  return face_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Recognize_Result::release_face() {
  // @@protoc_insertion_point(field_release:pb.Recognize.Result.face)
  
  return face_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Recognize_Result::set_allocated_face(::std::string* face) {
  if (face != NULL) {
    
  } else {
    
  }
  face_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face);
  // @@protoc_insertion_point(field_set_allocated:pb.Recognize.Result.face)
}

// optional string name = 2;
void Recognize_Result::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Recognize_Result::name() const {
  // @@protoc_insertion_point(field_get:pb.Recognize.Result.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Recognize_Result::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Recognize.Result.name)
}
void Recognize_Result::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Recognize.Result.name)
}
void Recognize_Result::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Recognize.Result.name)
}
::std::string* Recognize_Result::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.Recognize.Result.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Recognize_Result::release_name() {
  // @@protoc_insertion_point(field_release:pb.Recognize.Result.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Recognize_Result::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.Recognize.Result.name)
}

// optional float score = 11;
void Recognize_Result::clear_score() {
  score_ = 0;
}
float Recognize_Result::score() const {
  // @@protoc_insertion_point(field_get:pb.Recognize.Result.score)
  return score_;
}
void Recognize_Result::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.Recognize.Result.score)
}

inline const Recognize_Result* Recognize_Result::internal_default_instance() {
  return &Recognize_Result_default_instance_.get();
}
// -------------------------------------------------------------------

// Recognize

// repeated .pb.Recognize.Result top = 1;
int Recognize::top_size() const {
  return top_.size();
}
void Recognize::clear_top() {
  top_.Clear();
}
const ::pb::Recognize_Result& Recognize::top(int index) const {
  // @@protoc_insertion_point(field_get:pb.Recognize.top)
  return top_.Get(index);
}
::pb::Recognize_Result* Recognize::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Recognize.top)
  return top_.Mutable(index);
}
::pb::Recognize_Result* Recognize::add_top() {
  // @@protoc_insertion_point(field_add:pb.Recognize.top)
  return top_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::Recognize_Result >*
Recognize::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:pb.Recognize.top)
  return &top_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::Recognize_Result >&
Recognize::top() const {
  // @@protoc_insertion_point(field_list:pb.Recognize.top)
  return top_;
}

// optional string group = 2;
void Recognize::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Recognize::group() const {
  // @@protoc_insertion_point(field_get:pb.Recognize.group)
  return group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Recognize::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Recognize.group)
}
void Recognize::set_group(const char* value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Recognize.group)
}
void Recognize::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Recognize.group)
}
::std::string* Recognize::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:pb.Recognize.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Recognize::release_group() {
  // @@protoc_insertion_point(field_release:pb.Recognize.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Recognize::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:pb.Recognize.group)
}

// optional bytes crop = 100;
void Recognize::clear_crop() {
  crop_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Recognize::crop() const {
  // @@protoc_insertion_point(field_get:pb.Recognize.crop)
  return crop_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Recognize::set_crop(const ::std::string& value) {
  
  crop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Recognize.crop)
}
void Recognize::set_crop(const char* value) {
  
  crop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Recognize.crop)
}
void Recognize::set_crop(const void* value, size_t size) {
  
  crop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Recognize.crop)
}
::std::string* Recognize::mutable_crop() {
  
  // @@protoc_insertion_point(field_mutable:pb.Recognize.crop)
  return crop_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Recognize::release_crop() {
  // @@protoc_insertion_point(field_release:pb.Recognize.crop)
  
  return crop_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Recognize::set_allocated_crop(::std::string* crop) {
  if (crop != NULL) {
    
  } else {
    
  }
  crop_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crop);
  // @@protoc_insertion_point(field_set_allocated:pb.Recognize.crop)
}

// optional bytes full = 101;
void Recognize::clear_full() {
  full_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Recognize::full() const {
  // @@protoc_insertion_point(field_get:pb.Recognize.full)
  return full_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Recognize::set_full(const ::std::string& value) {
  
  full_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Recognize.full)
}
void Recognize::set_full(const char* value) {
  
  full_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Recognize.full)
}
void Recognize::set_full(const void* value, size_t size) {
  
  full_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Recognize.full)
}
::std::string* Recognize::mutable_full() {
  
  // @@protoc_insertion_point(field_mutable:pb.Recognize.full)
  return full_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Recognize::release_full() {
  // @@protoc_insertion_point(field_release:pb.Recognize.full)
  
  return full_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Recognize::set_allocated_full(::std::string* full) {
  if (full != NULL) {
    
  } else {
    
  }
  full_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full);
  // @@protoc_insertion_point(field_set_allocated:pb.Recognize.full)
}

inline const Recognize* Recognize::internal_default_instance() {
  return &Recognize_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapShot::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapShot::SnapShot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mqtt_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SnapShot)
}

void SnapShot::InitAsDefaultInstance() {
}

SnapShot::SnapShot(const SnapShot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SnapShot)
}

void SnapShot::SharedCtor() {
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SnapShot::~SnapShot() {
  // @@protoc_insertion_point(destructor:pb.SnapShot)
  SharedDtor();
}

void SnapShot::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnapShot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapShot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapShot_descriptor_;
}

const SnapShot& SnapShot::default_instance() {
  protobuf_InitDefaults_mqtt_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SnapShot> SnapShot_default_instance_;

SnapShot* SnapShot::New(::google::protobuf::Arena* arena) const {
  SnapShot* n = new SnapShot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapShot::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SnapShot)
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SnapShot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SnapShot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes image = 100;
      case 100: {
        if (tag == 802) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SnapShot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SnapShot)
  return false;
#undef DO_
}

void SnapShot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SnapShot)
  // optional bytes image = 100;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      100, this->image(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.SnapShot)
}

::google::protobuf::uint8* SnapShot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.SnapShot)
  // optional bytes image = 100;
  if (this->image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        100, this->image(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.SnapShot)
  return target;
}

size_t SnapShot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SnapShot)
  size_t total_size = 0;

  // optional bytes image = 100;
  if (this->image().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapShot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SnapShot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SnapShot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapShot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SnapShot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SnapShot)
    UnsafeMergeFrom(*source);
  }
}

void SnapShot::MergeFrom(const SnapShot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SnapShot)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SnapShot::UnsafeMergeFrom(const SnapShot& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
}

void SnapShot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SnapShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapShot::CopyFrom(const SnapShot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SnapShot)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SnapShot::IsInitialized() const {

  return true;
}

void SnapShot::Swap(SnapShot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapShot::InternalSwap(SnapShot* other) {
  image_.Swap(&other->image_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapShot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapShot_descriptor_;
  metadata.reflection = SnapShot_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapShot

// optional bytes image = 100;
void SnapShot::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SnapShot::image() const {
  // @@protoc_insertion_point(field_get:pb.SnapShot.image)
  return image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnapShot::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SnapShot.image)
}
void SnapShot::set_image(const char* value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SnapShot.image)
}
void SnapShot::set_image(const void* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SnapShot.image)
}
::std::string* SnapShot::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:pb.SnapShot.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnapShot::release_image() {
  // @@protoc_insertion_point(field_release:pb.SnapShot.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnapShot::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:pb.SnapShot.image)
}

inline const SnapShot* SnapShot::internal_default_instance() {
  return &SnapShot_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Upgrade::kTimeoutFieldNumber;
const int Upgrade::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Upgrade::Upgrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mqtt_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Upgrade)
}

void Upgrade::InitAsDefaultInstance() {
}

Upgrade::Upgrade(const Upgrade& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Upgrade)
}

void Upgrade::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0;
  _cached_size_ = 0;
}

Upgrade::~Upgrade() {
  // @@protoc_insertion_point(destructor:pb.Upgrade)
  SharedDtor();
}

void Upgrade::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Upgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Upgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Upgrade_descriptor_;
}

const Upgrade& Upgrade::default_instance() {
  protobuf_InitDefaults_mqtt_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Upgrade> Upgrade_default_instance_;

Upgrade* Upgrade::New(::google::protobuf::Arena* arena) const {
  Upgrade* n = new Upgrade;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Upgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Upgrade)
  timeout_ = 0;
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Upgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Upgrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 timeout = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_url;
        break;
      }

      // optional string url = 10;
      case 10: {
        if (tag == 82) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Upgrade.url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Upgrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Upgrade)
  return false;
#undef DO_
}

void Upgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Upgrade)
  // optional int32 timeout = 1;
  if (this->timeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timeout(), output);
  }

  // optional string url = 10;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Upgrade.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->url(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.Upgrade)
}

::google::protobuf::uint8* Upgrade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Upgrade)
  // optional int32 timeout = 1;
  if (this->timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timeout(), target);
  }

  // optional string url = 10;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Upgrade.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.Upgrade)
  return target;
}

size_t Upgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Upgrade)
  size_t total_size = 0;

  // optional int32 timeout = 1;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timeout());
  }

  // optional string url = 10;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Upgrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Upgrade)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Upgrade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Upgrade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Upgrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Upgrade)
    UnsafeMergeFrom(*source);
  }
}

void Upgrade::MergeFrom(const Upgrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Upgrade)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Upgrade::UnsafeMergeFrom(const Upgrade& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.timeout() != 0) {
    set_timeout(from.timeout());
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void Upgrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Upgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Upgrade::CopyFrom(const Upgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Upgrade)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Upgrade::IsInitialized() const {

  return true;
}

void Upgrade::Swap(Upgrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Upgrade::InternalSwap(Upgrade* other) {
  std::swap(timeout_, other->timeout_);
  url_.Swap(&other->url_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Upgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Upgrade_descriptor_;
  metadata.reflection = Upgrade_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Upgrade

// optional int32 timeout = 1;
void Upgrade::clear_timeout() {
  timeout_ = 0;
}
::google::protobuf::int32 Upgrade::timeout() const {
  // @@protoc_insertion_point(field_get:pb.Upgrade.timeout)
  return timeout_;
}
void Upgrade::set_timeout(::google::protobuf::int32 value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:pb.Upgrade.timeout)
}

// optional string url = 10;
void Upgrade::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Upgrade::url() const {
  // @@protoc_insertion_point(field_get:pb.Upgrade.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Upgrade::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Upgrade.url)
}
void Upgrade::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Upgrade.url)
}
void Upgrade::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Upgrade.url)
}
::std::string* Upgrade::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:pb.Upgrade.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Upgrade::release_url() {
  // @@protoc_insertion_point(field_release:pb.Upgrade.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Upgrade::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:pb.Upgrade.url)
}

inline const Upgrade* Upgrade::internal_default_instance() {
  return &Upgrade_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpgradeProgress::kProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpgradeProgress::UpgradeProgress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mqtt_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.UpgradeProgress)
}

void UpgradeProgress::InitAsDefaultInstance() {
}

UpgradeProgress::UpgradeProgress(const UpgradeProgress& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.UpgradeProgress)
}

void UpgradeProgress::SharedCtor() {
  progress_ = 0;
  _cached_size_ = 0;
}

UpgradeProgress::~UpgradeProgress() {
  // @@protoc_insertion_point(destructor:pb.UpgradeProgress)
  SharedDtor();
}

void UpgradeProgress::SharedDtor() {
}

void UpgradeProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeProgress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeProgress_descriptor_;
}

const UpgradeProgress& UpgradeProgress::default_instance() {
  protobuf_InitDefaults_mqtt_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UpgradeProgress> UpgradeProgress_default_instance_;

UpgradeProgress* UpgradeProgress::New(::google::protobuf::Arena* arena) const {
  UpgradeProgress* n = new UpgradeProgress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpgradeProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.UpgradeProgress)
  progress_ = 0;
}

bool UpgradeProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.UpgradeProgress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 progress = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.UpgradeProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.UpgradeProgress)
  return false;
#undef DO_
}

void UpgradeProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.UpgradeProgress)
  // optional int32 progress = 1;
  if (this->progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->progress(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.UpgradeProgress)
}

::google::protobuf::uint8* UpgradeProgress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.UpgradeProgress)
  // optional int32 progress = 1;
  if (this->progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->progress(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.UpgradeProgress)
  return target;
}

size_t UpgradeProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.UpgradeProgress)
  size_t total_size = 0;

  // optional int32 progress = 1;
  if (this->progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->progress());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.UpgradeProgress)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpgradeProgress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpgradeProgress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.UpgradeProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.UpgradeProgress)
    UnsafeMergeFrom(*source);
  }
}

void UpgradeProgress::MergeFrom(const UpgradeProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.UpgradeProgress)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UpgradeProgress::UnsafeMergeFrom(const UpgradeProgress& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.progress() != 0) {
    set_progress(from.progress());
  }
}

void UpgradeProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.UpgradeProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeProgress::CopyFrom(const UpgradeProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.UpgradeProgress)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UpgradeProgress::IsInitialized() const {

  return true;
}

void UpgradeProgress::Swap(UpgradeProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpgradeProgress::InternalSwap(UpgradeProgress* other) {
  std::swap(progress_, other->progress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpgradeProgress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeProgress_descriptor_;
  metadata.reflection = UpgradeProgress_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpgradeProgress

// optional int32 progress = 1;
void UpgradeProgress::clear_progress() {
  progress_ = 0;
}
::google::protobuf::int32 UpgradeProgress::progress() const {
  // @@protoc_insertion_point(field_get:pb.UpgradeProgress.progress)
  return progress_;
}
void UpgradeProgress::set_progress(::google::protobuf::int32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:pb.UpgradeProgress.progress)
}

inline const UpgradeProgress* UpgradeProgress::internal_default_instance() {
  return &UpgradeProgress_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kVersionFieldNumber;
const int Status::kAlgorithmFieldNumber;
const int Status::kLocalIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mqtt_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Status)
}

void Status::InitAsDefaultInstance() {
}

Status::Status(const Status& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Status)
}

void Status::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algorithm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:pb.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algorithm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  protobuf_InitDefaults_mqtt_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Status> Status_default_instance_;

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Status)
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Status.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_algorithm;
        break;
      }

      // optional string algorithm = 2;
      case 2: {
        if (tag == 18) {
         parse_algorithm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algorithm()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->algorithm().data(), this->algorithm().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Status.algorithm"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_local_ip;
        break;
      }

      // optional string local_ip = 10;
      case 10: {
        if (tag == 82) {
         parse_local_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->local_ip().data(), this->local_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Status.local_ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Status)
  // optional string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Status.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional string algorithm = 2;
  if (this->algorithm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->algorithm().data(), this->algorithm().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Status.algorithm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->algorithm(), output);
  }

  // optional string local_ip = 10;
  if (this->local_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_ip().data(), this->local_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Status.local_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->local_ip(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Status)
  // optional string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Status.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional string algorithm = 2;
  if (this->algorithm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->algorithm().data(), this->algorithm().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Status.algorithm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->algorithm(), target);
  }

  // optional string local_ip = 10;
  if (this->local_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_ip().data(), this->local_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Status.local_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->local_ip(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Status)
  size_t total_size = 0;

  // optional string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // optional string algorithm = 2;
  if (this->algorithm().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->algorithm());
  }

  // optional string local_ip = 10;
  if (this->local_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->local_ip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Status)
    UnsafeMergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Status)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Status::UnsafeMergeFrom(const Status& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.algorithm().size() > 0) {

    algorithm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algorithm_);
  }
  if (from.local_ip().size() > 0) {

    local_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_ip_);
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Status)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Status::IsInitialized() const {

  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  version_.Swap(&other->version_);
  algorithm_.Swap(&other->algorithm_);
  local_ip_.Swap(&other->local_ip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// optional string version = 1;
void Status::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Status::version() const {
  // @@protoc_insertion_point(field_get:pb.Status.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Status::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Status.version)
}
void Status::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Status.version)
}
void Status::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Status.version)
}
::std::string* Status::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:pb.Status.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Status::release_version() {
  // @@protoc_insertion_point(field_release:pb.Status.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Status::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:pb.Status.version)
}

// optional string algorithm = 2;
void Status::clear_algorithm() {
  algorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Status::algorithm() const {
  // @@protoc_insertion_point(field_get:pb.Status.algorithm)
  return algorithm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Status::set_algorithm(const ::std::string& value) {
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Status.algorithm)
}
void Status::set_algorithm(const char* value) {
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Status.algorithm)
}
void Status::set_algorithm(const char* value, size_t size) {
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Status.algorithm)
}
::std::string* Status::mutable_algorithm() {
  
  // @@protoc_insertion_point(field_mutable:pb.Status.algorithm)
  return algorithm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Status::release_algorithm() {
  // @@protoc_insertion_point(field_release:pb.Status.algorithm)
  
  return algorithm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Status::set_allocated_algorithm(::std::string* algorithm) {
  if (algorithm != NULL) {
    
  } else {
    
  }
  algorithm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algorithm);
  // @@protoc_insertion_point(field_set_allocated:pb.Status.algorithm)
}

// optional string local_ip = 10;
void Status::clear_local_ip() {
  local_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Status::local_ip() const {
  // @@protoc_insertion_point(field_get:pb.Status.local_ip)
  return local_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Status::set_local_ip(const ::std::string& value) {
  
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Status.local_ip)
}
void Status::set_local_ip(const char* value) {
  
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Status.local_ip)
}
void Status::set_local_ip(const char* value, size_t size) {
  
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Status.local_ip)
}
::std::string* Status::mutable_local_ip() {
  
  // @@protoc_insertion_point(field_mutable:pb.Status.local_ip)
  return local_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Status::release_local_ip() {
  // @@protoc_insertion_point(field_release:pb.Status.local_ip)
  
  return local_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Status::set_allocated_local_ip(::std::string* local_ip) {
  if (local_ip != NULL) {
    
  } else {
    
  }
  local_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_ip);
  // @@protoc_insertion_point(field_set_allocated:pb.Status.local_ip)
}

inline const Status* Status::internal_default_instance() {
  return &Status_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
