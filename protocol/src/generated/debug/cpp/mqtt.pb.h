// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mqtt.proto

#ifndef PROTOBUF_mqtt_2eproto__INCLUDED
#define PROTOBUF_mqtt_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mqtt_2eproto();
void protobuf_InitDefaults_mqtt_2eproto();
void protobuf_AssignDesc_mqtt_2eproto();
void protobuf_ShutdownFile_mqtt_2eproto();

class Capture;
class Face;
class Group;
class Recognize;
class Recognize_Result;
class Rect;
class RectF;
class Response;
class SnapShot;
class Start;
class Status;
class Upgrade;
class UpgradeProgress;

enum Start_Mode {
  Start_Mode_capture = 0,
  Start_Mode_recognize = 1,
  Start_Mode_Start_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Start_Mode_Start_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Start_Mode_IsValid(int value);
const Start_Mode Start_Mode_Mode_MIN = Start_Mode_capture;
const Start_Mode Start_Mode_Mode_MAX = Start_Mode_recognize;
const int Start_Mode_Mode_ARRAYSIZE = Start_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Start_Mode_descriptor();
inline const ::std::string& Start_Mode_Name(Start_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Start_Mode_descriptor(), value);
}
inline bool Start_Mode_Parse(
    const ::std::string& name, Start_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Start_Mode>(
    Start_Mode_descriptor(), name, value);
}
// ===================================================================

class Rect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Rect) */ {
 public:
  Rect();
  virtual ~Rect();

  Rect(const Rect& from);

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rect& default_instance();

  static const Rect* internal_default_instance();

  void Swap(Rect* other);

  // implements Message ----------------------------------------------

  inline Rect* New() const { return New(NULL); }

  Rect* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rect& from);
  void MergeFrom(const Rect& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Rect* other);
  void UnsafeMergeFrom(const Rect& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 left = 1;
  void clear_left();
  static const int kLeftFieldNumber = 1;
  ::google::protobuf::int32 left() const;
  void set_left(::google::protobuf::int32 value);

  // optional int32 top = 2;
  void clear_top();
  static const int kTopFieldNumber = 2;
  ::google::protobuf::int32 top() const;
  void set_top(::google::protobuf::int32 value);

  // optional int32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.Rect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mqtt_2eproto_impl();
  friend void  protobuf_AddDesc_mqtt_2eproto_impl();
  friend void protobuf_AssignDesc_mqtt_2eproto();
  friend void protobuf_ShutdownFile_mqtt_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Rect> Rect_default_instance_;

// -------------------------------------------------------------------

class RectF : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RectF) */ {
 public:
  RectF();
  virtual ~RectF();

  RectF(const RectF& from);

  inline RectF& operator=(const RectF& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RectF& default_instance();

  static const RectF* internal_default_instance();

  void Swap(RectF* other);

  // implements Message ----------------------------------------------

  inline RectF* New() const { return New(NULL); }

  RectF* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RectF& from);
  void MergeFrom(const RectF& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RectF* other);
  void UnsafeMergeFrom(const RectF& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float left = 1;
  void clear_left();
  static const int kLeftFieldNumber = 1;
  float left() const;
  void set_left(float value);

  // optional float top = 2;
  void clear_top();
  static const int kTopFieldNumber = 2;
  float top() const;
  void set_top(float value);

  // optional float width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  float width() const;
  void set_width(float value);

  // optional float height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  float height() const;
  void set_height(float value);

  // @@protoc_insertion_point(class_scope:pb.RectF)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float left_;
  float top_;
  float width_;
  float height_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mqtt_2eproto_impl();
  friend void  protobuf_AddDesc_mqtt_2eproto_impl();
  friend void protobuf_AssignDesc_mqtt_2eproto();
  friend void protobuf_ShutdownFile_mqtt_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RectF> RectF_default_instance_;

// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static const Response* internal_default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  void UnsafeMergeFrom(const Response& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  ::google::protobuf::int32 success() const;
  void set_success(::google::protobuf::int32 value);

  // optional string err = 2;
  void clear_err();
  static const int kErrFieldNumber = 2;
  const ::std::string& err() const;
  void set_err(const ::std::string& value);
  void set_err(const char* value);
  void set_err(const char* value, size_t size);
  ::std::string* mutable_err();
  ::std::string* release_err();
  void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:pb.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  ::google::protobuf::int32 success_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mqtt_2eproto_impl();
  friend void  protobuf_AddDesc_mqtt_2eproto_impl();
  friend void protobuf_AssignDesc_mqtt_2eproto();
  friend void protobuf_ShutdownFile_mqtt_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Response> Response_default_instance_;

// -------------------------------------------------------------------

class Start : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Start) */ {
 public:
  Start();
  virtual ~Start();

  Start(const Start& from);

  inline Start& operator=(const Start& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Start& default_instance();

  static const Start* internal_default_instance();

  void Swap(Start* other);

  // implements Message ----------------------------------------------

  inline Start* New() const { return New(NULL); }

  Start* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Start& from);
  void MergeFrom(const Start& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Start* other);
  void UnsafeMergeFrom(const Start& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Start_Mode Mode;
  static const Mode capture =
    Start_Mode_capture;
  static const Mode recognize =
    Start_Mode_recognize;
  static inline bool Mode_IsValid(int value) {
    return Start_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    Start_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    Start_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    Start_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return Start_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return Start_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return Start_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .pb.Start.Mode mode = 1;
  void clear_mode();
  static const int kModeFieldNumber = 1;
  ::pb::Start_Mode mode() const;
  void set_mode(::pb::Start_Mode value);

  // optional bool is_open = 2;
  void clear_is_open();
  static const int kIsOpenFieldNumber = 2;
  bool is_open() const;
  void set_is_open(bool value);

  // optional int32 health_check_interval = 3;
  void clear_health_check_interval();
  static const int kHealthCheckIntervalFieldNumber = 3;
  ::google::protobuf::int32 health_check_interval() const;
  void set_health_check_interval(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.Start)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int mode_;
  bool is_open_;
  ::google::protobuf::int32 health_check_interval_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mqtt_2eproto_impl();
  friend void  protobuf_AddDesc_mqtt_2eproto_impl();
  friend void protobuf_AssignDesc_mqtt_2eproto();
  friend void protobuf_ShutdownFile_mqtt_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Start> Start_default_instance_;

// -------------------------------------------------------------------

class Group : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Group) */ {
 public:
  Group();
  virtual ~Group();

  Group(const Group& from);

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Group& default_instance();

  static const Group* internal_default_instance();

  void Swap(Group* other);

  // implements Message ----------------------------------------------

  inline Group* New() const { return New(NULL); }

  Group* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Group& from);
  void MergeFrom(const Group& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Group* other);
  void UnsafeMergeFrom(const Group& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string group = 1;
  void clear_group();
  static const int kGroupFieldNumber = 1;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // optional int32 top = 2;
  void clear_top();
  static const int kTopFieldNumber = 2;
  ::google::protobuf::int32 top() const;
  void set_top(::google::protobuf::int32 value);

  // optional float threshold = 3;
  void clear_threshold();
  static const int kThresholdFieldNumber = 3;
  float threshold() const;
  void set_threshold(float value);

  // @@protoc_insertion_point(class_scope:pb.Group)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  ::google::protobuf::int32 top_;
  float threshold_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mqtt_2eproto_impl();
  friend void  protobuf_AddDesc_mqtt_2eproto_impl();
  friend void protobuf_AssignDesc_mqtt_2eproto();
  friend void protobuf_ShutdownFile_mqtt_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Group> Group_default_instance_;

// -------------------------------------------------------------------

class Face : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Face) */ {
 public:
  Face();
  virtual ~Face();

  Face(const Face& from);

  inline Face& operator=(const Face& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Face& default_instance();

  static const Face* internal_default_instance();

  void Swap(Face* other);

  // implements Message ----------------------------------------------

  inline Face* New() const { return New(NULL); }

  Face* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Face& from);
  void MergeFrom(const Face& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Face* other);
  void UnsafeMergeFrom(const Face& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string group = 1;
  void clear_group();
  static const int kGroupFieldNumber = 1;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // optional string face = 2;
  void clear_face();
  static const int kFaceFieldNumber = 2;
  const ::std::string& face() const;
  void set_face(const ::std::string& value);
  void set_face(const char* value);
  void set_face(const char* value, size_t size);
  ::std::string* mutable_face();
  ::std::string* release_face();
  void set_allocated_face(::std::string* face);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string url = 10;
  void clear_url();
  static const int kUrlFieldNumber = 10;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional bytes image = 100;
  void clear_image();
  static const int kImageFieldNumber = 100;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // @@protoc_insertion_point(class_scope:pb.Face)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  ::google::protobuf::internal::ArenaStringPtr face_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mqtt_2eproto_impl();
  friend void  protobuf_AddDesc_mqtt_2eproto_impl();
  friend void protobuf_AssignDesc_mqtt_2eproto();
  friend void protobuf_ShutdownFile_mqtt_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Face> Face_default_instance_;

// -------------------------------------------------------------------

class Capture : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Capture) */ {
 public:
  Capture();
  virtual ~Capture();

  Capture(const Capture& from);

  inline Capture& operator=(const Capture& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Capture& default_instance();

  static const Capture* internal_default_instance();

  void Swap(Capture* other);

  // implements Message ----------------------------------------------

  inline Capture* New() const { return New(NULL); }

  Capture* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Capture& from);
  void MergeFrom(const Capture& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Capture* other);
  void UnsafeMergeFrom(const Capture& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 track = 1;
  void clear_track();
  static const int kTrackFieldNumber = 1;
  ::google::protobuf::int32 track() const;
  void set_track(::google::protobuf::int32 value);

  // optional int32 seq_num = 2;
  void clear_seq_num();
  static const int kSeqNumFieldNumber = 2;
  ::google::protobuf::int32 seq_num() const;
  void set_seq_num(::google::protobuf::int32 value);

  // optional int64 timestamp = 10;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 10;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional float quality = 11;
  void clear_quality();
  static const int kQualityFieldNumber = 11;
  float quality() const;
  void set_quality(float value);

  // optional bytes crop = 100;
  void clear_crop();
  static const int kCropFieldNumber = 100;
  const ::std::string& crop() const;
  void set_crop(const ::std::string& value);
  void set_crop(const char* value);
  void set_crop(const void* value, size_t size);
  ::std::string* mutable_crop();
  ::std::string* release_crop();
  void set_allocated_crop(::std::string* crop);

  // optional .pb.RectF crop_rect = 101;
  bool has_crop_rect() const;
  void clear_crop_rect();
  static const int kCropRectFieldNumber = 101;
  const ::pb::RectF& crop_rect() const;
  ::pb::RectF* mutable_crop_rect();
  ::pb::RectF* release_crop_rect();
  void set_allocated_crop_rect(::pb::RectF* crop_rect);

  // optional bytes full = 200;
  void clear_full();
  static const int kFullFieldNumber = 200;
  const ::std::string& full() const;
  void set_full(const ::std::string& value);
  void set_full(const char* value);
  void set_full(const void* value, size_t size);
  ::std::string* mutable_full();
  ::std::string* release_full();
  void set_allocated_full(::std::string* full);

  // @@protoc_insertion_point(class_scope:pb.Capture)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr crop_;
  ::google::protobuf::internal::ArenaStringPtr full_;
  ::pb::RectF* crop_rect_;
  ::google::protobuf::int32 track_;
  ::google::protobuf::int32 seq_num_;
  ::google::protobuf::int64 timestamp_;
  float quality_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mqtt_2eproto_impl();
  friend void  protobuf_AddDesc_mqtt_2eproto_impl();
  friend void protobuf_AssignDesc_mqtt_2eproto();
  friend void protobuf_ShutdownFile_mqtt_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Capture> Capture_default_instance_;

// -------------------------------------------------------------------

class Recognize_Result : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Recognize.Result) */ {
 public:
  Recognize_Result();
  virtual ~Recognize_Result();

  Recognize_Result(const Recognize_Result& from);

  inline Recognize_Result& operator=(const Recognize_Result& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Recognize_Result& default_instance();

  static const Recognize_Result* internal_default_instance();

  void Swap(Recognize_Result* other);

  // implements Message ----------------------------------------------

  inline Recognize_Result* New() const { return New(NULL); }

  Recognize_Result* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Recognize_Result& from);
  void MergeFrom(const Recognize_Result& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Recognize_Result* other);
  void UnsafeMergeFrom(const Recognize_Result& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string face = 1;
  void clear_face();
  static const int kFaceFieldNumber = 1;
  const ::std::string& face() const;
  void set_face(const ::std::string& value);
  void set_face(const char* value);
  void set_face(const char* value, size_t size);
  ::std::string* mutable_face();
  ::std::string* release_face();
  void set_allocated_face(::std::string* face);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional float score = 11;
  void clear_score();
  static const int kScoreFieldNumber = 11;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:pb.Recognize.Result)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr face_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float score_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mqtt_2eproto_impl();
  friend void  protobuf_AddDesc_mqtt_2eproto_impl();
  friend void protobuf_AssignDesc_mqtt_2eproto();
  friend void protobuf_ShutdownFile_mqtt_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Recognize_Result> Recognize_Result_default_instance_;

// -------------------------------------------------------------------

class Recognize : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Recognize) */ {
 public:
  Recognize();
  virtual ~Recognize();

  Recognize(const Recognize& from);

  inline Recognize& operator=(const Recognize& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Recognize& default_instance();

  static const Recognize* internal_default_instance();

  void Swap(Recognize* other);

  // implements Message ----------------------------------------------

  inline Recognize* New() const { return New(NULL); }

  Recognize* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Recognize& from);
  void MergeFrom(const Recognize& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Recognize* other);
  void UnsafeMergeFrom(const Recognize& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Recognize_Result Result;

  // accessors -------------------------------------------------------

  // repeated .pb.Recognize.Result top = 1;
  int top_size() const;
  void clear_top();
  static const int kTopFieldNumber = 1;
  const ::pb::Recognize_Result& top(int index) const;
  ::pb::Recognize_Result* mutable_top(int index);
  ::pb::Recognize_Result* add_top();
  ::google::protobuf::RepeatedPtrField< ::pb::Recognize_Result >*
      mutable_top();
  const ::google::protobuf::RepeatedPtrField< ::pb::Recognize_Result >&
      top() const;

  // optional string group = 2;
  void clear_group();
  static const int kGroupFieldNumber = 2;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // optional bytes crop = 100;
  void clear_crop();
  static const int kCropFieldNumber = 100;
  const ::std::string& crop() const;
  void set_crop(const ::std::string& value);
  void set_crop(const char* value);
  void set_crop(const void* value, size_t size);
  ::std::string* mutable_crop();
  ::std::string* release_crop();
  void set_allocated_crop(::std::string* crop);

  // optional bytes full = 101;
  void clear_full();
  static const int kFullFieldNumber = 101;
  const ::std::string& full() const;
  void set_full(const ::std::string& value);
  void set_full(const char* value);
  void set_full(const void* value, size_t size);
  ::std::string* mutable_full();
  ::std::string* release_full();
  void set_allocated_full(::std::string* full);

  // @@protoc_insertion_point(class_scope:pb.Recognize)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::Recognize_Result > top_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  ::google::protobuf::internal::ArenaStringPtr crop_;
  ::google::protobuf::internal::ArenaStringPtr full_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mqtt_2eproto_impl();
  friend void  protobuf_AddDesc_mqtt_2eproto_impl();
  friend void protobuf_AssignDesc_mqtt_2eproto();
  friend void protobuf_ShutdownFile_mqtt_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Recognize> Recognize_default_instance_;

// -------------------------------------------------------------------

class SnapShot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SnapShot) */ {
 public:
  SnapShot();
  virtual ~SnapShot();

  SnapShot(const SnapShot& from);

  inline SnapShot& operator=(const SnapShot& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapShot& default_instance();

  static const SnapShot* internal_default_instance();

  void Swap(SnapShot* other);

  // implements Message ----------------------------------------------

  inline SnapShot* New() const { return New(NULL); }

  SnapShot* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapShot& from);
  void MergeFrom(const SnapShot& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SnapShot* other);
  void UnsafeMergeFrom(const SnapShot& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes image = 100;
  void clear_image();
  static const int kImageFieldNumber = 100;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // @@protoc_insertion_point(class_scope:pb.SnapShot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mqtt_2eproto_impl();
  friend void  protobuf_AddDesc_mqtt_2eproto_impl();
  friend void protobuf_AssignDesc_mqtt_2eproto();
  friend void protobuf_ShutdownFile_mqtt_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SnapShot> SnapShot_default_instance_;

// -------------------------------------------------------------------

class Upgrade : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Upgrade) */ {
 public:
  Upgrade();
  virtual ~Upgrade();

  Upgrade(const Upgrade& from);

  inline Upgrade& operator=(const Upgrade& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Upgrade& default_instance();

  static const Upgrade* internal_default_instance();

  void Swap(Upgrade* other);

  // implements Message ----------------------------------------------

  inline Upgrade* New() const { return New(NULL); }

  Upgrade* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Upgrade& from);
  void MergeFrom(const Upgrade& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Upgrade* other);
  void UnsafeMergeFrom(const Upgrade& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 timeout = 1;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 1;
  ::google::protobuf::int32 timeout() const;
  void set_timeout(::google::protobuf::int32 value);

  // optional string url = 10;
  void clear_url();
  static const int kUrlFieldNumber = 10;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:pb.Upgrade)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int32 timeout_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mqtt_2eproto_impl();
  friend void  protobuf_AddDesc_mqtt_2eproto_impl();
  friend void protobuf_AssignDesc_mqtt_2eproto();
  friend void protobuf_ShutdownFile_mqtt_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Upgrade> Upgrade_default_instance_;

// -------------------------------------------------------------------

class UpgradeProgress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.UpgradeProgress) */ {
 public:
  UpgradeProgress();
  virtual ~UpgradeProgress();

  UpgradeProgress(const UpgradeProgress& from);

  inline UpgradeProgress& operator=(const UpgradeProgress& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpgradeProgress& default_instance();

  static const UpgradeProgress* internal_default_instance();

  void Swap(UpgradeProgress* other);

  // implements Message ----------------------------------------------

  inline UpgradeProgress* New() const { return New(NULL); }

  UpgradeProgress* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpgradeProgress& from);
  void MergeFrom(const UpgradeProgress& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpgradeProgress* other);
  void UnsafeMergeFrom(const UpgradeProgress& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 progress = 1;
  void clear_progress();
  static const int kProgressFieldNumber = 1;
  ::google::protobuf::int32 progress() const;
  void set_progress(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.UpgradeProgress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 progress_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mqtt_2eproto_impl();
  friend void  protobuf_AddDesc_mqtt_2eproto_impl();
  friend void protobuf_AssignDesc_mqtt_2eproto();
  friend void protobuf_ShutdownFile_mqtt_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<UpgradeProgress> UpgradeProgress_default_instance_;

// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  static const Status* internal_default_instance();

  void Swap(Status* other);

  // implements Message ----------------------------------------------

  inline Status* New() const { return New(NULL); }

  Status* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Status* other);
  void UnsafeMergeFrom(const Status& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string algorithm = 2;
  void clear_algorithm();
  static const int kAlgorithmFieldNumber = 2;
  const ::std::string& algorithm() const;
  void set_algorithm(const ::std::string& value);
  void set_algorithm(const char* value);
  void set_algorithm(const char* value, size_t size);
  ::std::string* mutable_algorithm();
  ::std::string* release_algorithm();
  void set_allocated_algorithm(::std::string* algorithm);

  // optional string local_ip = 10;
  void clear_local_ip();
  static const int kLocalIpFieldNumber = 10;
  const ::std::string& local_ip() const;
  void set_local_ip(const ::std::string& value);
  void set_local_ip(const char* value);
  void set_local_ip(const char* value, size_t size);
  ::std::string* mutable_local_ip();
  ::std::string* release_local_ip();
  void set_allocated_local_ip(::std::string* local_ip);

  // @@protoc_insertion_point(class_scope:pb.Status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr algorithm_;
  ::google::protobuf::internal::ArenaStringPtr local_ip_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mqtt_2eproto_impl();
  friend void  protobuf_AddDesc_mqtt_2eproto_impl();
  friend void protobuf_AssignDesc_mqtt_2eproto();
  friend void protobuf_ShutdownFile_mqtt_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Status> Status_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Rect

// optional int32 left = 1;
inline void Rect::clear_left() {
  left_ = 0;
}
inline ::google::protobuf::int32 Rect::left() const {
  // @@protoc_insertion_point(field_get:pb.Rect.left)
  return left_;
}
inline void Rect::set_left(::google::protobuf::int32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:pb.Rect.left)
}

// optional int32 top = 2;
inline void Rect::clear_top() {
  top_ = 0;
}
inline ::google::protobuf::int32 Rect::top() const {
  // @@protoc_insertion_point(field_get:pb.Rect.top)
  return top_;
}
inline void Rect::set_top(::google::protobuf::int32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:pb.Rect.top)
}

// optional int32 width = 3;
inline void Rect::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Rect::width() const {
  // @@protoc_insertion_point(field_get:pb.Rect.width)
  return width_;
}
inline void Rect::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:pb.Rect.width)
}

// optional int32 height = 4;
inline void Rect::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Rect::height() const {
  // @@protoc_insertion_point(field_get:pb.Rect.height)
  return height_;
}
inline void Rect::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:pb.Rect.height)
}

inline const Rect* Rect::internal_default_instance() {
  return &Rect_default_instance_.get();
}
// -------------------------------------------------------------------

// RectF

// optional float left = 1;
inline void RectF::clear_left() {
  left_ = 0;
}
inline float RectF::left() const {
  // @@protoc_insertion_point(field_get:pb.RectF.left)
  return left_;
}
inline void RectF::set_left(float value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:pb.RectF.left)
}

// optional float top = 2;
inline void RectF::clear_top() {
  top_ = 0;
}
inline float RectF::top() const {
  // @@protoc_insertion_point(field_get:pb.RectF.top)
  return top_;
}
inline void RectF::set_top(float value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:pb.RectF.top)
}

// optional float width = 3;
inline void RectF::clear_width() {
  width_ = 0;
}
inline float RectF::width() const {
  // @@protoc_insertion_point(field_get:pb.RectF.width)
  return width_;
}
inline void RectF::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:pb.RectF.width)
}

// optional float height = 4;
inline void RectF::clear_height() {
  height_ = 0;
}
inline float RectF::height() const {
  // @@protoc_insertion_point(field_get:pb.RectF.height)
  return height_;
}
inline void RectF::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:pb.RectF.height)
}

inline const RectF* RectF::internal_default_instance() {
  return &RectF_default_instance_.get();
}
// -------------------------------------------------------------------

// Response

// optional int32 success = 1;
inline void Response::clear_success() {
  success_ = 0;
}
inline ::google::protobuf::int32 Response::success() const {
  // @@protoc_insertion_point(field_get:pb.Response.success)
  return success_;
}
inline void Response::set_success(::google::protobuf::int32 value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:pb.Response.success)
}

// optional string err = 2;
inline void Response::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::err() const {
  // @@protoc_insertion_point(field_get:pb.Response.err)
  return err_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_err(const ::std::string& value) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Response.err)
}
inline void Response::set_err(const char* value) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Response.err)
}
inline void Response::set_err(const char* value, size_t size) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Response.err)
}
inline ::std::string* Response::mutable_err() {
  
  // @@protoc_insertion_point(field_mutable:pb.Response.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_err() {
  // @@protoc_insertion_point(field_release:pb.Response.err)
  
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    
  } else {
    
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:pb.Response.err)
}

inline const Response* Response::internal_default_instance() {
  return &Response_default_instance_.get();
}
// -------------------------------------------------------------------

// Start

// optional .pb.Start.Mode mode = 1;
inline void Start::clear_mode() {
  mode_ = 0;
}
inline ::pb::Start_Mode Start::mode() const {
  // @@protoc_insertion_point(field_get:pb.Start.mode)
  return static_cast< ::pb::Start_Mode >(mode_);
}
inline void Start::set_mode(::pb::Start_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:pb.Start.mode)
}

// optional bool is_open = 2;
inline void Start::clear_is_open() {
  is_open_ = false;
}
inline bool Start::is_open() const {
  // @@protoc_insertion_point(field_get:pb.Start.is_open)
  return is_open_;
}
inline void Start::set_is_open(bool value) {
  
  is_open_ = value;
  // @@protoc_insertion_point(field_set:pb.Start.is_open)
}

// optional int32 health_check_interval = 3;
inline void Start::clear_health_check_interval() {
  health_check_interval_ = 0;
}
inline ::google::protobuf::int32 Start::health_check_interval() const {
  // @@protoc_insertion_point(field_get:pb.Start.health_check_interval)
  return health_check_interval_;
}
inline void Start::set_health_check_interval(::google::protobuf::int32 value) {
  
  health_check_interval_ = value;
  // @@protoc_insertion_point(field_set:pb.Start.health_check_interval)
}

inline const Start* Start::internal_default_instance() {
  return &Start_default_instance_.get();
}
// -------------------------------------------------------------------

// Group

// optional string group = 1;
inline void Group::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::group() const {
  // @@protoc_insertion_point(field_get:pb.Group.group)
  return group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Group.group)
}
inline void Group::set_group(const char* value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Group.group)
}
inline void Group::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Group.group)
}
inline ::std::string* Group::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:pb.Group.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_group() {
  // @@protoc_insertion_point(field_release:pb.Group.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:pb.Group.group)
}

// optional int32 top = 2;
inline void Group::clear_top() {
  top_ = 0;
}
inline ::google::protobuf::int32 Group::top() const {
  // @@protoc_insertion_point(field_get:pb.Group.top)
  return top_;
}
inline void Group::set_top(::google::protobuf::int32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:pb.Group.top)
}

// optional float threshold = 3;
inline void Group::clear_threshold() {
  threshold_ = 0;
}
inline float Group::threshold() const {
  // @@protoc_insertion_point(field_get:pb.Group.threshold)
  return threshold_;
}
inline void Group::set_threshold(float value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:pb.Group.threshold)
}

inline const Group* Group::internal_default_instance() {
  return &Group_default_instance_.get();
}
// -------------------------------------------------------------------

// Face

// optional string group = 1;
inline void Face::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Face::group() const {
  // @@protoc_insertion_point(field_get:pb.Face.group)
  return group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Face::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Face.group)
}
inline void Face::set_group(const char* value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Face.group)
}
inline void Face::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Face.group)
}
inline ::std::string* Face::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:pb.Face.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Face::release_group() {
  // @@protoc_insertion_point(field_release:pb.Face.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Face::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:pb.Face.group)
}

// optional string face = 2;
inline void Face::clear_face() {
  face_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Face::face() const {
  // @@protoc_insertion_point(field_get:pb.Face.face)
  return face_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Face::set_face(const ::std::string& value) {
  
  face_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Face.face)
}
inline void Face::set_face(const char* value) {
  
  face_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Face.face)
}
inline void Face::set_face(const char* value, size_t size) {
  
  face_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Face.face)
}
inline ::std::string* Face::mutable_face() {
  
  // @@protoc_insertion_point(field_mutable:pb.Face.face)
  return face_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Face::release_face() {
  // @@protoc_insertion_point(field_release:pb.Face.face)
  
  return face_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Face::set_allocated_face(::std::string* face) {
  if (face != NULL) {
    
  } else {
    
  }
  face_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face);
  // @@protoc_insertion_point(field_set_allocated:pb.Face.face)
}

// optional string name = 3;
inline void Face::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Face::name() const {
  // @@protoc_insertion_point(field_get:pb.Face.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Face::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Face.name)
}
inline void Face::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Face.name)
}
inline void Face::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Face.name)
}
inline ::std::string* Face::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.Face.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Face::release_name() {
  // @@protoc_insertion_point(field_release:pb.Face.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Face::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.Face.name)
}

// optional string url = 10;
inline void Face::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Face::url() const {
  // @@protoc_insertion_point(field_get:pb.Face.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Face::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Face.url)
}
inline void Face::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Face.url)
}
inline void Face::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Face.url)
}
inline ::std::string* Face::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:pb.Face.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Face::release_url() {
  // @@protoc_insertion_point(field_release:pb.Face.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Face::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:pb.Face.url)
}

// optional bytes image = 100;
inline void Face::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Face::image() const {
  // @@protoc_insertion_point(field_get:pb.Face.image)
  return image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Face::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Face.image)
}
inline void Face::set_image(const char* value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Face.image)
}
inline void Face::set_image(const void* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Face.image)
}
inline ::std::string* Face::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:pb.Face.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Face::release_image() {
  // @@protoc_insertion_point(field_release:pb.Face.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Face::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:pb.Face.image)
}

inline const Face* Face::internal_default_instance() {
  return &Face_default_instance_.get();
}
// -------------------------------------------------------------------

// Capture

// optional int32 track = 1;
inline void Capture::clear_track() {
  track_ = 0;
}
inline ::google::protobuf::int32 Capture::track() const {
  // @@protoc_insertion_point(field_get:pb.Capture.track)
  return track_;
}
inline void Capture::set_track(::google::protobuf::int32 value) {
  
  track_ = value;
  // @@protoc_insertion_point(field_set:pb.Capture.track)
}

// optional int32 seq_num = 2;
inline void Capture::clear_seq_num() {
  seq_num_ = 0;
}
inline ::google::protobuf::int32 Capture::seq_num() const {
  // @@protoc_insertion_point(field_get:pb.Capture.seq_num)
  return seq_num_;
}
inline void Capture::set_seq_num(::google::protobuf::int32 value) {
  
  seq_num_ = value;
  // @@protoc_insertion_point(field_set:pb.Capture.seq_num)
}

// optional int64 timestamp = 10;
inline void Capture::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Capture::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.Capture.timestamp)
  return timestamp_;
}
inline void Capture::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:pb.Capture.timestamp)
}

// optional float quality = 11;
inline void Capture::clear_quality() {
  quality_ = 0;
}
inline float Capture::quality() const {
  // @@protoc_insertion_point(field_get:pb.Capture.quality)
  return quality_;
}
inline void Capture::set_quality(float value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:pb.Capture.quality)
}

// optional bytes crop = 100;
inline void Capture::clear_crop() {
  crop_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Capture::crop() const {
  // @@protoc_insertion_point(field_get:pb.Capture.crop)
  return crop_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Capture::set_crop(const ::std::string& value) {
  
  crop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Capture.crop)
}
inline void Capture::set_crop(const char* value) {
  
  crop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Capture.crop)
}
inline void Capture::set_crop(const void* value, size_t size) {
  
  crop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Capture.crop)
}
inline ::std::string* Capture::mutable_crop() {
  
  // @@protoc_insertion_point(field_mutable:pb.Capture.crop)
  return crop_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Capture::release_crop() {
  // @@protoc_insertion_point(field_release:pb.Capture.crop)
  
  return crop_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Capture::set_allocated_crop(::std::string* crop) {
  if (crop != NULL) {
    
  } else {
    
  }
  crop_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crop);
  // @@protoc_insertion_point(field_set_allocated:pb.Capture.crop)
}

// optional .pb.RectF crop_rect = 101;
inline bool Capture::has_crop_rect() const {
  return this != internal_default_instance() && crop_rect_ != NULL;
}
inline void Capture::clear_crop_rect() {
  if (GetArenaNoVirtual() == NULL && crop_rect_ != NULL) delete crop_rect_;
  crop_rect_ = NULL;
}
inline const ::pb::RectF& Capture::crop_rect() const {
  // @@protoc_insertion_point(field_get:pb.Capture.crop_rect)
  return crop_rect_ != NULL ? *crop_rect_
                         : *::pb::RectF::internal_default_instance();
}
inline ::pb::RectF* Capture::mutable_crop_rect() {
  
  if (crop_rect_ == NULL) {
    crop_rect_ = new ::pb::RectF;
  }
  // @@protoc_insertion_point(field_mutable:pb.Capture.crop_rect)
  return crop_rect_;
}
inline ::pb::RectF* Capture::release_crop_rect() {
  // @@protoc_insertion_point(field_release:pb.Capture.crop_rect)
  
  ::pb::RectF* temp = crop_rect_;
  crop_rect_ = NULL;
  return temp;
}
inline void Capture::set_allocated_crop_rect(::pb::RectF* crop_rect) {
  delete crop_rect_;
  crop_rect_ = crop_rect;
  if (crop_rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Capture.crop_rect)
}

// optional bytes full = 200;
inline void Capture::clear_full() {
  full_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Capture::full() const {
  // @@protoc_insertion_point(field_get:pb.Capture.full)
  return full_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Capture::set_full(const ::std::string& value) {
  
  full_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Capture.full)
}
inline void Capture::set_full(const char* value) {
  
  full_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Capture.full)
}
inline void Capture::set_full(const void* value, size_t size) {
  
  full_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Capture.full)
}
inline ::std::string* Capture::mutable_full() {
  
  // @@protoc_insertion_point(field_mutable:pb.Capture.full)
  return full_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Capture::release_full() {
  // @@protoc_insertion_point(field_release:pb.Capture.full)
  
  return full_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Capture::set_allocated_full(::std::string* full) {
  if (full != NULL) {
    
  } else {
    
  }
  full_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full);
  // @@protoc_insertion_point(field_set_allocated:pb.Capture.full)
}

inline const Capture* Capture::internal_default_instance() {
  return &Capture_default_instance_.get();
}
// -------------------------------------------------------------------

// Recognize_Result

// optional string face = 1;
inline void Recognize_Result::clear_face() {
  face_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Recognize_Result::face() const {
  // @@protoc_insertion_point(field_get:pb.Recognize.Result.face)
  return face_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Recognize_Result::set_face(const ::std::string& value) {
  
  face_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Recognize.Result.face)
}
inline void Recognize_Result::set_face(const char* value) {
  
  face_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Recognize.Result.face)
}
inline void Recognize_Result::set_face(const char* value, size_t size) {
  
  face_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Recognize.Result.face)
}
inline ::std::string* Recognize_Result::mutable_face() {
  
  // @@protoc_insertion_point(field_mutable:pb.Recognize.Result.face)
  return face_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Recognize_Result::release_face() {
  // @@protoc_insertion_point(field_release:pb.Recognize.Result.face)
  
  return face_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Recognize_Result::set_allocated_face(::std::string* face) {
  if (face != NULL) {
    
  } else {
    
  }
  face_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face);
  // @@protoc_insertion_point(field_set_allocated:pb.Recognize.Result.face)
}

// optional string name = 2;
inline void Recognize_Result::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Recognize_Result::name() const {
  // @@protoc_insertion_point(field_get:pb.Recognize.Result.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Recognize_Result::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Recognize.Result.name)
}
inline void Recognize_Result::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Recognize.Result.name)
}
inline void Recognize_Result::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Recognize.Result.name)
}
inline ::std::string* Recognize_Result::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.Recognize.Result.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Recognize_Result::release_name() {
  // @@protoc_insertion_point(field_release:pb.Recognize.Result.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Recognize_Result::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.Recognize.Result.name)
}

// optional float score = 11;
inline void Recognize_Result::clear_score() {
  score_ = 0;
}
inline float Recognize_Result::score() const {
  // @@protoc_insertion_point(field_get:pb.Recognize.Result.score)
  return score_;
}
inline void Recognize_Result::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.Recognize.Result.score)
}

inline const Recognize_Result* Recognize_Result::internal_default_instance() {
  return &Recognize_Result_default_instance_.get();
}
// -------------------------------------------------------------------

// Recognize

// repeated .pb.Recognize.Result top = 1;
inline int Recognize::top_size() const {
  return top_.size();
}
inline void Recognize::clear_top() {
  top_.Clear();
}
inline const ::pb::Recognize_Result& Recognize::top(int index) const {
  // @@protoc_insertion_point(field_get:pb.Recognize.top)
  return top_.Get(index);
}
inline ::pb::Recognize_Result* Recognize::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Recognize.top)
  return top_.Mutable(index);
}
inline ::pb::Recognize_Result* Recognize::add_top() {
  // @@protoc_insertion_point(field_add:pb.Recognize.top)
  return top_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Recognize_Result >*
Recognize::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:pb.Recognize.top)
  return &top_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Recognize_Result >&
Recognize::top() const {
  // @@protoc_insertion_point(field_list:pb.Recognize.top)
  return top_;
}

// optional string group = 2;
inline void Recognize::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Recognize::group() const {
  // @@protoc_insertion_point(field_get:pb.Recognize.group)
  return group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Recognize::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Recognize.group)
}
inline void Recognize::set_group(const char* value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Recognize.group)
}
inline void Recognize::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Recognize.group)
}
inline ::std::string* Recognize::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:pb.Recognize.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Recognize::release_group() {
  // @@protoc_insertion_point(field_release:pb.Recognize.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Recognize::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:pb.Recognize.group)
}

// optional bytes crop = 100;
inline void Recognize::clear_crop() {
  crop_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Recognize::crop() const {
  // @@protoc_insertion_point(field_get:pb.Recognize.crop)
  return crop_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Recognize::set_crop(const ::std::string& value) {
  
  crop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Recognize.crop)
}
inline void Recognize::set_crop(const char* value) {
  
  crop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Recognize.crop)
}
inline void Recognize::set_crop(const void* value, size_t size) {
  
  crop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Recognize.crop)
}
inline ::std::string* Recognize::mutable_crop() {
  
  // @@protoc_insertion_point(field_mutable:pb.Recognize.crop)
  return crop_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Recognize::release_crop() {
  // @@protoc_insertion_point(field_release:pb.Recognize.crop)
  
  return crop_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Recognize::set_allocated_crop(::std::string* crop) {
  if (crop != NULL) {
    
  } else {
    
  }
  crop_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crop);
  // @@protoc_insertion_point(field_set_allocated:pb.Recognize.crop)
}

// optional bytes full = 101;
inline void Recognize::clear_full() {
  full_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Recognize::full() const {
  // @@protoc_insertion_point(field_get:pb.Recognize.full)
  return full_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Recognize::set_full(const ::std::string& value) {
  
  full_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Recognize.full)
}
inline void Recognize::set_full(const char* value) {
  
  full_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Recognize.full)
}
inline void Recognize::set_full(const void* value, size_t size) {
  
  full_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Recognize.full)
}
inline ::std::string* Recognize::mutable_full() {
  
  // @@protoc_insertion_point(field_mutable:pb.Recognize.full)
  return full_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Recognize::release_full() {
  // @@protoc_insertion_point(field_release:pb.Recognize.full)
  
  return full_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Recognize::set_allocated_full(::std::string* full) {
  if (full != NULL) {
    
  } else {
    
  }
  full_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full);
  // @@protoc_insertion_point(field_set_allocated:pb.Recognize.full)
}

inline const Recognize* Recognize::internal_default_instance() {
  return &Recognize_default_instance_.get();
}
// -------------------------------------------------------------------

// SnapShot

// optional bytes image = 100;
inline void SnapShot::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SnapShot::image() const {
  // @@protoc_insertion_point(field_get:pb.SnapShot.image)
  return image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnapShot::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SnapShot.image)
}
inline void SnapShot::set_image(const char* value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SnapShot.image)
}
inline void SnapShot::set_image(const void* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SnapShot.image)
}
inline ::std::string* SnapShot::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:pb.SnapShot.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnapShot::release_image() {
  // @@protoc_insertion_point(field_release:pb.SnapShot.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnapShot::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:pb.SnapShot.image)
}

inline const SnapShot* SnapShot::internal_default_instance() {
  return &SnapShot_default_instance_.get();
}
// -------------------------------------------------------------------

// Upgrade

// optional int32 timeout = 1;
inline void Upgrade::clear_timeout() {
  timeout_ = 0;
}
inline ::google::protobuf::int32 Upgrade::timeout() const {
  // @@protoc_insertion_point(field_get:pb.Upgrade.timeout)
  return timeout_;
}
inline void Upgrade::set_timeout(::google::protobuf::int32 value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:pb.Upgrade.timeout)
}

// optional string url = 10;
inline void Upgrade::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Upgrade::url() const {
  // @@protoc_insertion_point(field_get:pb.Upgrade.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Upgrade::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Upgrade.url)
}
inline void Upgrade::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Upgrade.url)
}
inline void Upgrade::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Upgrade.url)
}
inline ::std::string* Upgrade::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:pb.Upgrade.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Upgrade::release_url() {
  // @@protoc_insertion_point(field_release:pb.Upgrade.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Upgrade::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:pb.Upgrade.url)
}

inline const Upgrade* Upgrade::internal_default_instance() {
  return &Upgrade_default_instance_.get();
}
// -------------------------------------------------------------------

// UpgradeProgress

// optional int32 progress = 1;
inline void UpgradeProgress::clear_progress() {
  progress_ = 0;
}
inline ::google::protobuf::int32 UpgradeProgress::progress() const {
  // @@protoc_insertion_point(field_get:pb.UpgradeProgress.progress)
  return progress_;
}
inline void UpgradeProgress::set_progress(::google::protobuf::int32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:pb.UpgradeProgress.progress)
}

inline const UpgradeProgress* UpgradeProgress::internal_default_instance() {
  return &UpgradeProgress_default_instance_.get();
}
// -------------------------------------------------------------------

// Status

// optional string version = 1;
inline void Status::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Status::version() const {
  // @@protoc_insertion_point(field_get:pb.Status.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Status.version)
}
inline void Status::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Status.version)
}
inline void Status::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Status.version)
}
inline ::std::string* Status::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:pb.Status.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_version() {
  // @@protoc_insertion_point(field_release:pb.Status.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:pb.Status.version)
}

// optional string algorithm = 2;
inline void Status::clear_algorithm() {
  algorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Status::algorithm() const {
  // @@protoc_insertion_point(field_get:pb.Status.algorithm)
  return algorithm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_algorithm(const ::std::string& value) {
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Status.algorithm)
}
inline void Status::set_algorithm(const char* value) {
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Status.algorithm)
}
inline void Status::set_algorithm(const char* value, size_t size) {
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Status.algorithm)
}
inline ::std::string* Status::mutable_algorithm() {
  
  // @@protoc_insertion_point(field_mutable:pb.Status.algorithm)
  return algorithm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_algorithm() {
  // @@protoc_insertion_point(field_release:pb.Status.algorithm)
  
  return algorithm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_algorithm(::std::string* algorithm) {
  if (algorithm != NULL) {
    
  } else {
    
  }
  algorithm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algorithm);
  // @@protoc_insertion_point(field_set_allocated:pb.Status.algorithm)
}

// optional string local_ip = 10;
inline void Status::clear_local_ip() {
  local_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Status::local_ip() const {
  // @@protoc_insertion_point(field_get:pb.Status.local_ip)
  return local_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_local_ip(const ::std::string& value) {
  
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Status.local_ip)
}
inline void Status::set_local_ip(const char* value) {
  
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Status.local_ip)
}
inline void Status::set_local_ip(const char* value, size_t size) {
  
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Status.local_ip)
}
inline ::std::string* Status::mutable_local_ip() {
  
  // @@protoc_insertion_point(field_mutable:pb.Status.local_ip)
  return local_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_local_ip() {
  // @@protoc_insertion_point(field_release:pb.Status.local_ip)
  
  return local_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_local_ip(::std::string* local_ip) {
  if (local_ip != NULL) {
    
  } else {
    
  }
  local_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_ip);
  // @@protoc_insertion_point(field_set_allocated:pb.Status.local_ip)
}

inline const Status* Status::internal_default_instance() {
  return &Status_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::Start_Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::Start_Mode>() {
  return ::pb::Start_Mode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mqtt_2eproto__INCLUDED
